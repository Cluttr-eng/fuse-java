/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.api;

import org.fuse.client.ApiCallback;
import org.fuse.client.ApiClient;
import org.fuse.client.ApiException;
import org.fuse.client.ApiResponse;
import org.fuse.client.Configuration;
import org.fuse.client.Pair;
import org.fuse.client.ProgressRequestBody;
import org.fuse.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.fuse.client.model.AddAccountEventsRequest;
import org.fuse.client.model.AddAccountEventsResponse;
import org.fuse.client.model.AssetReportResponse;
import org.fuse.client.model.CreateAssetReportRequest;
import org.fuse.client.model.CreateAssetReportResponse;
import org.fuse.client.model.CreateConsumerRiskReportCustomizationRequest;
import org.fuse.client.model.CreateConsumerRiskReportCustomizationResponse;
import org.fuse.client.model.CreateConsumerRiskReportRequest;
import org.fuse.client.model.CreateConsumerRiskReportResponse;
import org.fuse.client.model.CreateLinkTokenRequest;
import org.fuse.client.model.CreateLinkTokenResponse;
import org.fuse.client.model.CreateSessionRequest;
import org.fuse.client.model.CreateSessionResponse;
import org.fuse.client.model.DeleteFinancialConnectionResponse;
import org.fuse.client.model.EnrichTransactionsRequest;
import org.fuse.client.model.EnrichTransactionsResponse;
import org.fuse.client.model.ExchangeFinancialConnectionsPublicTokenRequest;
import org.fuse.client.model.ExchangeFinancialConnectionsPublicTokenResponse;
import org.fuse.client.model.GetAssetReportRequest;
import org.fuse.client.model.GetConsumerRiskReportResponse;
import org.fuse.client.model.GetEntityResponse;
import org.fuse.client.model.GetFinanceScoreResponse;
import org.fuse.client.model.GetFinancialConnectionResponse;
import org.fuse.client.model.GetFinancialConnectionsAccountDetailsRequest;
import org.fuse.client.model.GetFinancialConnectionsAccountDetailsResponse;
import org.fuse.client.model.GetFinancialConnectionsAccountStatementRequest;
import org.fuse.client.model.GetFinancialConnectionsAccountStatementResponse;
import org.fuse.client.model.GetFinancialConnectionsAccountsRequest;
import org.fuse.client.model.GetFinancialConnectionsAccountsResponse;
import org.fuse.client.model.GetFinancialConnectionsBalanceRequest;
import org.fuse.client.model.GetFinancialConnectionsBalanceResponse;
import org.fuse.client.model.GetFinancialConnectionsOwnersRequest;
import org.fuse.client.model.GetFinancialConnectionsOwnersResponse;
import org.fuse.client.model.GetFinancialConnectionsTransactionsRequest;
import org.fuse.client.model.GetFinancialConnectionsTransactionsResponse;
import org.fuse.client.model.GetFinancialInstitutionResponse;
import org.fuse.client.model.GetInvestmentHoldingsRequest;
import org.fuse.client.model.GetInvestmentHoldingsResponse;
import org.fuse.client.model.GetInvestmentTransactionsRequest;
import org.fuse.client.model.GetInvestmentTransactionsResponse;
import org.fuse.client.model.GetLiabilitiesRequest;
import org.fuse.client.model.GetLiabilitiesResponse;
import org.fuse.client.model.MigrateFinancialConnectionsTokenRequest;
import org.fuse.client.model.MigrateFinancialConnectionsTokenResponse;
import org.fuse.client.model.RefreshAssetReportRequest;
import org.fuse.client.model.RefreshAssetReportResponse;
import org.fuse.client.model.SyncFinancialConnectionsDataResponse;
import org.fuse.client.model.UpdateConsumerRiskReportCustomizationRequest;
import org.fuse.client.model.UpdateConsumerRiskReportCustomizationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FuseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FuseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FuseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAccountEvents
     * @param accountId  (required)
     * @param addAccountEventsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountEventsCall(String accountId, AddAccountEventsRequest addAccountEventsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccountEventsRequest;

        // create path and map variables
        String localVarPath = "/v1/accounts/{account_id}/events"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountEventsValidateBeforeCall(String accountId, AddAccountEventsRequest addAccountEventsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addAccountEvents(Async)");
        }

        return addAccountEventsCall(accountId, addAccountEventsRequest, _callback);

    }

    /**
     * 
     * 
     * @param accountId  (required)
     * @param addAccountEventsRequest  (optional)
     * @return AddAccountEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AddAccountEventsResponse addAccountEvents(String accountId, AddAccountEventsRequest addAccountEventsRequest) throws ApiException {
        ApiResponse<AddAccountEventsResponse> localVarResp = addAccountEventsWithHttpInfo(accountId, addAccountEventsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param accountId  (required)
     * @param addAccountEventsRequest  (optional)
     * @return ApiResponse&lt;AddAccountEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddAccountEventsResponse> addAccountEventsWithHttpInfo(String accountId, AddAccountEventsRequest addAccountEventsRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccountEventsValidateBeforeCall(accountId, addAccountEventsRequest, null);
        Type localVarReturnType = new TypeToken<AddAccountEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountId  (required)
     * @param addAccountEventsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountEventsAsync(String accountId, AddAccountEventsRequest addAccountEventsRequest, final ApiCallback<AddAccountEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountEventsValidateBeforeCall(accountId, addAccountEventsRequest, _callback);
        Type localVarReturnType = new TypeToken<AddAccountEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAssetReport
     * @param createAssetReportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetReportCall(CreateAssetReportRequest createAssetReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAssetReportRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/asset_report/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetReportValidateBeforeCall(CreateAssetReportRequest createAssetReportRequest, final ApiCallback _callback) throws ApiException {
        return createAssetReportCall(createAssetReportRequest, _callback);

    }

    /**
     * 
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param createAssetReportRequest  (optional)
     * @return CreateAssetReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateAssetReportResponse createAssetReport(CreateAssetReportRequest createAssetReportRequest) throws ApiException {
        ApiResponse<CreateAssetReportResponse> localVarResp = createAssetReportWithHttpInfo(createAssetReportRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param createAssetReportRequest  (optional)
     * @return ApiResponse&lt;CreateAssetReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAssetReportResponse> createAssetReportWithHttpInfo(CreateAssetReportRequest createAssetReportRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetReportValidateBeforeCall(createAssetReportRequest, null);
        Type localVarReturnType = new TypeToken<CreateAssetReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this endpoint to generate an Asset Report for a user. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param createAssetReportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetReportAsync(CreateAssetReportRequest createAssetReportRequest, final ApiCallback<CreateAssetReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetReportValidateBeforeCall(createAssetReportRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAssetReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createConsumerRiskReport
     * @param createConsumerRiskReportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConsumerRiskReportCall(CreateConsumerRiskReportRequest createConsumerRiskReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConsumerRiskReportRequest;

        // create path and map variables
        String localVarPath = "/v1/risk_report/consumer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConsumerRiskReportValidateBeforeCall(CreateConsumerRiskReportRequest createConsumerRiskReportRequest, final ApiCallback _callback) throws ApiException {
        return createConsumerRiskReportCall(createConsumerRiskReportRequest, _callback);

    }

    /**
     * 
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param createConsumerRiskReportRequest  (optional)
     * @return CreateConsumerRiskReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreateConsumerRiskReportResponse createConsumerRiskReport(CreateConsumerRiskReportRequest createConsumerRiskReportRequest) throws ApiException {
        ApiResponse<CreateConsumerRiskReportResponse> localVarResp = createConsumerRiskReportWithHttpInfo(createConsumerRiskReportRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param createConsumerRiskReportRequest  (optional)
     * @return ApiResponse&lt;CreateConsumerRiskReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConsumerRiskReportResponse> createConsumerRiskReportWithHttpInfo(CreateConsumerRiskReportRequest createConsumerRiskReportRequest) throws ApiException {
        okhttp3.Call localVarCall = createConsumerRiskReportValidateBeforeCall(createConsumerRiskReportRequest, null);
        Type localVarReturnType = new TypeToken<CreateConsumerRiskReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts the background process that will calculate the consumer risk report depending on the customization passed in.
     * @param createConsumerRiskReportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConsumerRiskReportAsync(CreateConsumerRiskReportRequest createConsumerRiskReportRequest, final ApiCallback<CreateConsumerRiskReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConsumerRiskReportValidateBeforeCall(createConsumerRiskReportRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateConsumerRiskReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createConsumerRiskReportCustomization
     * @param createConsumerRiskReportCustomizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConsumerRiskReportCustomizationCall(CreateConsumerRiskReportCustomizationRequest createConsumerRiskReportCustomizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConsumerRiskReportCustomizationRequest;

        // create path and map variables
        String localVarPath = "/v1/risk_report/consumer/customization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConsumerRiskReportCustomizationValidateBeforeCall(CreateConsumerRiskReportCustomizationRequest createConsumerRiskReportCustomizationRequest, final ApiCallback _callback) throws ApiException {
        return createConsumerRiskReportCustomizationCall(createConsumerRiskReportCustomizationRequest, _callback);

    }

    /**
     * 
     * 
     * @param createConsumerRiskReportCustomizationRequest  (optional)
     * @return CreateConsumerRiskReportCustomizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreateConsumerRiskReportCustomizationResponse createConsumerRiskReportCustomization(CreateConsumerRiskReportCustomizationRequest createConsumerRiskReportCustomizationRequest) throws ApiException {
        ApiResponse<CreateConsumerRiskReportCustomizationResponse> localVarResp = createConsumerRiskReportCustomizationWithHttpInfo(createConsumerRiskReportCustomizationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createConsumerRiskReportCustomizationRequest  (optional)
     * @return ApiResponse&lt;CreateConsumerRiskReportCustomizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConsumerRiskReportCustomizationResponse> createConsumerRiskReportCustomizationWithHttpInfo(CreateConsumerRiskReportCustomizationRequest createConsumerRiskReportCustomizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createConsumerRiskReportCustomizationValidateBeforeCall(createConsumerRiskReportCustomizationRequest, null);
        Type localVarReturnType = new TypeToken<CreateConsumerRiskReportCustomizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createConsumerRiskReportCustomizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConsumerRiskReportCustomizationAsync(CreateConsumerRiskReportCustomizationRequest createConsumerRiskReportCustomizationRequest, final ApiCallback<CreateConsumerRiskReportCustomizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConsumerRiskReportCustomizationValidateBeforeCall(createConsumerRiskReportCustomizationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateConsumerRiskReportCustomizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLinkToken
     * @param createLinkTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkTokenCall(CreateLinkTokenRequest createLinkTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLinkTokenRequest;

        // create path and map variables
        String localVarPath = "/v1/link/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkTokenValidateBeforeCall(CreateLinkTokenRequest createLinkTokenRequest, final ApiCallback _callback) throws ApiException {
        return createLinkTokenCall(createLinkTokenRequest, _callback);

    }

    /**
     * 
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param createLinkTokenRequest  (optional)
     * @return CreateLinkTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateLinkTokenResponse createLinkToken(CreateLinkTokenRequest createLinkTokenRequest) throws ApiException {
        ApiResponse<CreateLinkTokenResponse> localVarResp = createLinkTokenWithHttpInfo(createLinkTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param createLinkTokenRequest  (optional)
     * @return ApiResponse&lt;CreateLinkTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLinkTokenResponse> createLinkTokenWithHttpInfo(CreateLinkTokenRequest createLinkTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = createLinkTokenValidateBeforeCall(createLinkTokenRequest, null);
        Type localVarReturnType = new TypeToken<CreateLinkTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a link token to start the process of a user connecting to a specific financial institution.
     * @param createLinkTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkTokenAsync(CreateLinkTokenRequest createLinkTokenRequest, final ApiCallback<CreateLinkTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkTokenValidateBeforeCall(createLinkTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateLinkTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSession
     * @param createSessionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionCall(CreateSessionRequest createSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSessionRequest;

        // create path and map variables
        String localVarPath = "/v1/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionValidateBeforeCall(CreateSessionRequest createSessionRequest, final ApiCallback _callback) throws ApiException {
        return createSessionCall(createSessionRequest, _callback);

    }

    /**
     * 
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param createSessionRequest  (optional)
     * @return CreateSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionResponse createSession(CreateSessionRequest createSessionRequest) throws ApiException {
        ApiResponse<CreateSessionResponse> localVarResp = createSessionWithHttpInfo(createSessionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param createSessionRequest  (optional)
     * @return ApiResponse&lt;CreateSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSessionResponse> createSessionWithHttpInfo(CreateSessionRequest createSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionValidateBeforeCall(createSessionRequest, null);
        Type localVarReturnType = new TypeToken<CreateSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
     * @param createSessionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionAsync(CreateSessionRequest createSessionRequest, final ApiCallback<CreateSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionValidateBeforeCall(createSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFinancialConnection
     * @param financialConnectionIdToDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFinancialConnectionCall(String financialConnectionIdToDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/{financial_connection_id_to_delete}"
            .replace("{" + "financial_connection_id_to_delete" + "}", localVarApiClient.escapeString(financialConnectionIdToDelete.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFinancialConnectionValidateBeforeCall(String financialConnectionIdToDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'financialConnectionIdToDelete' is set
        if (financialConnectionIdToDelete == null) {
            throw new ApiException("Missing the required parameter 'financialConnectionIdToDelete' when calling deleteFinancialConnection(Async)");
        }

        return deleteFinancialConnectionCall(financialConnectionIdToDelete, _callback);

    }

    /**
     * Delete a financial connection
     * 
     * @param financialConnectionIdToDelete  (required)
     * @return DeleteFinancialConnectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFinancialConnectionResponse deleteFinancialConnection(String financialConnectionIdToDelete) throws ApiException {
        ApiResponse<DeleteFinancialConnectionResponse> localVarResp = deleteFinancialConnectionWithHttpInfo(financialConnectionIdToDelete);
        return localVarResp.getData();
    }

    /**
     * Delete a financial connection
     * 
     * @param financialConnectionIdToDelete  (required)
     * @return ApiResponse&lt;DeleteFinancialConnectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteFinancialConnectionResponse> deleteFinancialConnectionWithHttpInfo(String financialConnectionIdToDelete) throws ApiException {
        okhttp3.Call localVarCall = deleteFinancialConnectionValidateBeforeCall(financialConnectionIdToDelete, null);
        Type localVarReturnType = new TypeToken<DeleteFinancialConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a financial connection (asynchronously)
     * 
     * @param financialConnectionIdToDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFinancialConnectionAsync(String financialConnectionIdToDelete, final ApiCallback<DeleteFinancialConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFinancialConnectionValidateBeforeCall(financialConnectionIdToDelete, _callback);
        Type localVarReturnType = new TypeToken<DeleteFinancialConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrichTransactions
     * @param fuseClientId  (required)
     * @param fuseApiKey  (required)
     * @param enrichTransactionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrichTransactionsCall(String fuseClientId, String fuseApiKey, EnrichTransactionsRequest enrichTransactionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enrichTransactionsRequest;

        // create path and map variables
        String localVarPath = "/v1/transactions/enrich";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fuseClientId != null) {
            localVarHeaderParams.put("Fuse-Client-Id", localVarApiClient.parameterToString(fuseClientId));
        }

        if (fuseApiKey != null) {
            localVarHeaderParams.put("Fuse-Api-Key", localVarApiClient.parameterToString(fuseApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrichTransactionsValidateBeforeCall(String fuseClientId, String fuseApiKey, EnrichTransactionsRequest enrichTransactionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fuseClientId' is set
        if (fuseClientId == null) {
            throw new ApiException("Missing the required parameter 'fuseClientId' when calling enrichTransactions(Async)");
        }

        // verify the required parameter 'fuseApiKey' is set
        if (fuseApiKey == null) {
            throw new ApiException("Missing the required parameter 'fuseApiKey' when calling enrichTransactions(Async)");
        }

        return enrichTransactionsCall(fuseClientId, fuseApiKey, enrichTransactionsRequest, _callback);

    }

    /**
     * 
     * 
     * @param fuseClientId  (required)
     * @param fuseApiKey  (required)
     * @param enrichTransactionsRequest  (optional)
     * @return EnrichTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EnrichTransactionsResponse enrichTransactions(String fuseClientId, String fuseApiKey, EnrichTransactionsRequest enrichTransactionsRequest) throws ApiException {
        ApiResponse<EnrichTransactionsResponse> localVarResp = enrichTransactionsWithHttpInfo(fuseClientId, fuseApiKey, enrichTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param fuseClientId  (required)
     * @param fuseApiKey  (required)
     * @param enrichTransactionsRequest  (optional)
     * @return ApiResponse&lt;EnrichTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnrichTransactionsResponse> enrichTransactionsWithHttpInfo(String fuseClientId, String fuseApiKey, EnrichTransactionsRequest enrichTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = enrichTransactionsValidateBeforeCall(fuseClientId, fuseApiKey, enrichTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<EnrichTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param fuseClientId  (required)
     * @param fuseApiKey  (required)
     * @param enrichTransactionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrichTransactionsAsync(String fuseClientId, String fuseApiKey, EnrichTransactionsRequest enrichTransactionsRequest, final ApiCallback<EnrichTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrichTransactionsValidateBeforeCall(fuseClientId, fuseApiKey, enrichTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<EnrichTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exchangeFinancialConnectionsPublicToken
     * @param exchangeFinancialConnectionsPublicTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeFinancialConnectionsPublicTokenCall(ExchangeFinancialConnectionsPublicTokenRequest exchangeFinancialConnectionsPublicTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exchangeFinancialConnectionsPublicTokenRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/public_token/exchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeFinancialConnectionsPublicTokenValidateBeforeCall(ExchangeFinancialConnectionsPublicTokenRequest exchangeFinancialConnectionsPublicTokenRequest, final ApiCallback _callback) throws ApiException {
        return exchangeFinancialConnectionsPublicTokenCall(exchangeFinancialConnectionsPublicTokenRequest, _callback);

    }

    /**
     * 
     * API to exchange a public token for an access token and financial connection id
     * @param exchangeFinancialConnectionsPublicTokenRequest  (optional)
     * @return ExchangeFinancialConnectionsPublicTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ExchangeFinancialConnectionsPublicTokenResponse exchangeFinancialConnectionsPublicToken(ExchangeFinancialConnectionsPublicTokenRequest exchangeFinancialConnectionsPublicTokenRequest) throws ApiException {
        ApiResponse<ExchangeFinancialConnectionsPublicTokenResponse> localVarResp = exchangeFinancialConnectionsPublicTokenWithHttpInfo(exchangeFinancialConnectionsPublicTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * API to exchange a public token for an access token and financial connection id
     * @param exchangeFinancialConnectionsPublicTokenRequest  (optional)
     * @return ApiResponse&lt;ExchangeFinancialConnectionsPublicTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExchangeFinancialConnectionsPublicTokenResponse> exchangeFinancialConnectionsPublicTokenWithHttpInfo(ExchangeFinancialConnectionsPublicTokenRequest exchangeFinancialConnectionsPublicTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = exchangeFinancialConnectionsPublicTokenValidateBeforeCall(exchangeFinancialConnectionsPublicTokenRequest, null);
        Type localVarReturnType = new TypeToken<ExchangeFinancialConnectionsPublicTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API to exchange a public token for an access token and financial connection id
     * @param exchangeFinancialConnectionsPublicTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeFinancialConnectionsPublicTokenAsync(ExchangeFinancialConnectionsPublicTokenRequest exchangeFinancialConnectionsPublicTokenRequest, final ApiCallback<ExchangeFinancialConnectionsPublicTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeFinancialConnectionsPublicTokenValidateBeforeCall(exchangeFinancialConnectionsPublicTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<ExchangeFinancialConnectionsPublicTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetReport
     * @param getAssetReportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetReportCall(GetAssetReportRequest getAssetReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAssetReportRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/asset_report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetReportValidateBeforeCall(GetAssetReportRequest getAssetReportRequest, final ApiCallback _callback) throws ApiException {
        return getAssetReportCall(getAssetReportRequest, _callback);

    }

    /**
     * 
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param getAssetReportRequest  (optional)
     * @return RefreshAssetReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public RefreshAssetReportResponse getAssetReport(GetAssetReportRequest getAssetReportRequest) throws ApiException {
        ApiResponse<RefreshAssetReportResponse> localVarResp = getAssetReportWithHttpInfo(getAssetReportRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param getAssetReportRequest  (optional)
     * @return ApiResponse&lt;RefreshAssetReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshAssetReportResponse> getAssetReportWithHttpInfo(GetAssetReportRequest getAssetReportRequest) throws ApiException {
        okhttp3.Call localVarCall = getAssetReportValidateBeforeCall(getAssetReportRequest, null);
        Type localVarReturnType = new TypeToken<RefreshAssetReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param getAssetReportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetReportAsync(GetAssetReportRequest getAssetReportRequest, final ApiCallback<RefreshAssetReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetReportValidateBeforeCall(getAssetReportRequest, _callback);
        Type localVarReturnType = new TypeToken<RefreshAssetReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsumerRiskReport
     * @param consumerRiskReportId  (required)
     * @param recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumerRiskReportCall(String consumerRiskReportId, Boolean recalculate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/risk_report/consumer/{consumer_risk_report_id}"
            .replace("{" + "consumer_risk_report_id" + "}", localVarApiClient.escapeString(consumerRiskReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recalculate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recalculate", recalculate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsumerRiskReportValidateBeforeCall(String consumerRiskReportId, Boolean recalculate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerRiskReportId' is set
        if (consumerRiskReportId == null) {
            throw new ApiException("Missing the required parameter 'consumerRiskReportId' when calling getConsumerRiskReport(Async)");
        }

        return getConsumerRiskReportCall(consumerRiskReportId, recalculate, _callback);

    }

    /**
     * Get consumer risk report
     * 
     * @param consumerRiskReportId  (required)
     * @param recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @return GetConsumerRiskReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetConsumerRiskReportResponse getConsumerRiskReport(String consumerRiskReportId, Boolean recalculate) throws ApiException {
        ApiResponse<GetConsumerRiskReportResponse> localVarResp = getConsumerRiskReportWithHttpInfo(consumerRiskReportId, recalculate);
        return localVarResp.getData();
    }

    /**
     * Get consumer risk report
     * 
     * @param consumerRiskReportId  (required)
     * @param recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @return ApiResponse&lt;GetConsumerRiskReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConsumerRiskReportResponse> getConsumerRiskReportWithHttpInfo(String consumerRiskReportId, Boolean recalculate) throws ApiException {
        okhttp3.Call localVarCall = getConsumerRiskReportValidateBeforeCall(consumerRiskReportId, recalculate, null);
        Type localVarReturnType = new TypeToken<GetConsumerRiskReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get consumer risk report (asynchronously)
     * 
     * @param consumerRiskReportId  (required)
     * @param recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumerRiskReportAsync(String consumerRiskReportId, Boolean recalculate, final ApiCallback<GetConsumerRiskReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsumerRiskReportValidateBeforeCall(consumerRiskReportId, recalculate, _callback);
        Type localVarReturnType = new TypeToken<GetConsumerRiskReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntity
     * @param entityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityCall(String entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/entities/{entity_id}"
            .replace("{" + "entity_id" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityValidateBeforeCall(String entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getEntity(Async)");
        }

        return getEntityCall(entityId, _callback);

    }

    /**
     * Get entity
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the &#39;create session&#39; endpoint
     * @param entityId  (required)
     * @return GetEntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEntityResponse getEntity(String entityId) throws ApiException {
        ApiResponse<GetEntityResponse> localVarResp = getEntityWithHttpInfo(entityId);
        return localVarResp.getData();
    }

    /**
     * Get entity
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the &#39;create session&#39; endpoint
     * @param entityId  (required)
     * @return ApiResponse&lt;GetEntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEntityResponse> getEntityWithHttpInfo(String entityId) throws ApiException {
        okhttp3.Call localVarCall = getEntityValidateBeforeCall(entityId, null);
        Type localVarReturnType = new TypeToken<GetEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entity (asynchronously)
     * An entity is automatically created after a successful connection. The id of the entity is what is set when calling the &#39;create session&#39; endpoint
     * @param entityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityAsync(String entityId, final ApiCallback<GetEntityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityValidateBeforeCall(entityId, _callback);
        Type localVarReturnType = new TypeToken<GetEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinanceScore
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinanceScoreCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{account_id}/finance_score"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinanceScoreValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getFinanceScore(Async)");
        }

        return getFinanceScoreCall(accountId, _callback);

    }

    /**
     * Get finance score
     * 
     * @param accountId  (required)
     * @return GetFinanceScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetFinanceScoreResponse getFinanceScore(String accountId) throws ApiException {
        ApiResponse<GetFinanceScoreResponse> localVarResp = getFinanceScoreWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get finance score
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;GetFinanceScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinanceScoreResponse> getFinanceScoreWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getFinanceScoreValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<GetFinanceScoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get finance score (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinanceScoreAsync(String accountId, final ApiCallback<GetFinanceScoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinanceScoreValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<GetFinanceScoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnection
     * @param financialConnectionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionCall(String financialConnectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/{financial_connection_id}"
            .replace("{" + "financial_connection_id" + "}", localVarApiClient.escapeString(financialConnectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionValidateBeforeCall(String financialConnectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'financialConnectionId' is set
        if (financialConnectionId == null) {
            throw new ApiException("Missing the required parameter 'financialConnectionId' when calling getFinancialConnection(Async)");
        }

        return getFinancialConnectionCall(financialConnectionId, _callback);

    }

    /**
     * Get financial connection details
     * 
     * @param financialConnectionId  (required)
     * @return GetFinancialConnectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionResponse getFinancialConnection(String financialConnectionId) throws ApiException {
        ApiResponse<GetFinancialConnectionResponse> localVarResp = getFinancialConnectionWithHttpInfo(financialConnectionId);
        return localVarResp.getData();
    }

    /**
     * Get financial connection details
     * 
     * @param financialConnectionId  (required)
     * @return ApiResponse&lt;GetFinancialConnectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionResponse> getFinancialConnectionWithHttpInfo(String financialConnectionId) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionValidateBeforeCall(financialConnectionId, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get financial connection details (asynchronously)
     * 
     * @param financialConnectionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionAsync(String financialConnectionId, final ApiCallback<GetFinancialConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionValidateBeforeCall(financialConnectionId, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnectionsAccountDetails
     * @param getFinancialConnectionsAccountDetailsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsAccountDetailsCall(GetFinancialConnectionsAccountDetailsRequest getFinancialConnectionsAccountDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFinancialConnectionsAccountDetailsRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/accounts/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionsAccountDetailsValidateBeforeCall(GetFinancialConnectionsAccountDetailsRequest getFinancialConnectionsAccountDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFinancialConnectionsAccountDetailsRequest' is set
        if (getFinancialConnectionsAccountDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'getFinancialConnectionsAccountDetailsRequest' when calling getFinancialConnectionsAccountDetails(Async)");
        }

        return getFinancialConnectionsAccountDetailsCall(getFinancialConnectionsAccountDetailsRequest, _callback);

    }

    /**
     * Get account details
     * 
     * @param getFinancialConnectionsAccountDetailsRequest  (required)
     * @return GetFinancialConnectionsAccountDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionsAccountDetailsResponse getFinancialConnectionsAccountDetails(GetFinancialConnectionsAccountDetailsRequest getFinancialConnectionsAccountDetailsRequest) throws ApiException {
        ApiResponse<GetFinancialConnectionsAccountDetailsResponse> localVarResp = getFinancialConnectionsAccountDetailsWithHttpInfo(getFinancialConnectionsAccountDetailsRequest);
        return localVarResp.getData();
    }

    /**
     * Get account details
     * 
     * @param getFinancialConnectionsAccountDetailsRequest  (required)
     * @return ApiResponse&lt;GetFinancialConnectionsAccountDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionsAccountDetailsResponse> getFinancialConnectionsAccountDetailsWithHttpInfo(GetFinancialConnectionsAccountDetailsRequest getFinancialConnectionsAccountDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionsAccountDetailsValidateBeforeCall(getFinancialConnectionsAccountDetailsRequest, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsAccountDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account details (asynchronously)
     * 
     * @param getFinancialConnectionsAccountDetailsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsAccountDetailsAsync(GetFinancialConnectionsAccountDetailsRequest getFinancialConnectionsAccountDetailsRequest, final ApiCallback<GetFinancialConnectionsAccountDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionsAccountDetailsValidateBeforeCall(getFinancialConnectionsAccountDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsAccountDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnectionsAccountStatement
     * @param getFinancialConnectionsAccountStatementRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsAccountStatementCall(GetFinancialConnectionsAccountStatementRequest getFinancialConnectionsAccountStatementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFinancialConnectionsAccountStatementRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/accounts/statement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionsAccountStatementValidateBeforeCall(GetFinancialConnectionsAccountStatementRequest getFinancialConnectionsAccountStatementRequest, final ApiCallback _callback) throws ApiException {
        return getFinancialConnectionsAccountStatementCall(getFinancialConnectionsAccountStatementRequest, _callback);

    }

    /**
     * 
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param getFinancialConnectionsAccountStatementRequest  (optional)
     * @return GetFinancialConnectionsAccountStatementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionsAccountStatementResponse getFinancialConnectionsAccountStatement(GetFinancialConnectionsAccountStatementRequest getFinancialConnectionsAccountStatementRequest) throws ApiException {
        ApiResponse<GetFinancialConnectionsAccountStatementResponse> localVarResp = getFinancialConnectionsAccountStatementWithHttpInfo(getFinancialConnectionsAccountStatementRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param getFinancialConnectionsAccountStatementRequest  (optional)
     * @return ApiResponse&lt;GetFinancialConnectionsAccountStatementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionsAccountStatementResponse> getFinancialConnectionsAccountStatementWithHttpInfo(GetFinancialConnectionsAccountStatementRequest getFinancialConnectionsAccountStatementRequest) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionsAccountStatementValidateBeforeCall(getFinancialConnectionsAccountStatementRequest, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsAccountStatementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves an account statement for the given financial connection, account and date. This endpoint may time out so we recommend using a retry mechanism with exponential backoff.
     * @param getFinancialConnectionsAccountStatementRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsAccountStatementAsync(GetFinancialConnectionsAccountStatementRequest getFinancialConnectionsAccountStatementRequest, final ApiCallback<GetFinancialConnectionsAccountStatementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionsAccountStatementValidateBeforeCall(getFinancialConnectionsAccountStatementRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsAccountStatementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnectionsAccounts
     * @param getFinancialConnectionsAccountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsAccountsCall(GetFinancialConnectionsAccountsRequest getFinancialConnectionsAccountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFinancialConnectionsAccountsRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionsAccountsValidateBeforeCall(GetFinancialConnectionsAccountsRequest getFinancialConnectionsAccountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFinancialConnectionsAccountsRequest' is set
        if (getFinancialConnectionsAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'getFinancialConnectionsAccountsRequest' when calling getFinancialConnectionsAccounts(Async)");
        }

        return getFinancialConnectionsAccountsCall(getFinancialConnectionsAccountsRequest, _callback);

    }

    /**
     * Get accounts
     * 
     * @param getFinancialConnectionsAccountsRequest  (required)
     * @return GetFinancialConnectionsAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionsAccountsResponse getFinancialConnectionsAccounts(GetFinancialConnectionsAccountsRequest getFinancialConnectionsAccountsRequest) throws ApiException {
        ApiResponse<GetFinancialConnectionsAccountsResponse> localVarResp = getFinancialConnectionsAccountsWithHttpInfo(getFinancialConnectionsAccountsRequest);
        return localVarResp.getData();
    }

    /**
     * Get accounts
     * 
     * @param getFinancialConnectionsAccountsRequest  (required)
     * @return ApiResponse&lt;GetFinancialConnectionsAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionsAccountsResponse> getFinancialConnectionsAccountsWithHttpInfo(GetFinancialConnectionsAccountsRequest getFinancialConnectionsAccountsRequest) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionsAccountsValidateBeforeCall(getFinancialConnectionsAccountsRequest, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get accounts (asynchronously)
     * 
     * @param getFinancialConnectionsAccountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsAccountsAsync(GetFinancialConnectionsAccountsRequest getFinancialConnectionsAccountsRequest, final ApiCallback<GetFinancialConnectionsAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionsAccountsValidateBeforeCall(getFinancialConnectionsAccountsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnectionsBalances
     * @param getFinancialConnectionsBalanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsBalancesCall(GetFinancialConnectionsBalanceRequest getFinancialConnectionsBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFinancialConnectionsBalanceRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionsBalancesValidateBeforeCall(GetFinancialConnectionsBalanceRequest getFinancialConnectionsBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFinancialConnectionsBalanceRequest' is set
        if (getFinancialConnectionsBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'getFinancialConnectionsBalanceRequest' when calling getFinancialConnectionsBalances(Async)");
        }

        return getFinancialConnectionsBalancesCall(getFinancialConnectionsBalanceRequest, _callback);

    }

    /**
     * Get balances
     * 
     * @param getFinancialConnectionsBalanceRequest  (required)
     * @return GetFinancialConnectionsBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionsBalanceResponse getFinancialConnectionsBalances(GetFinancialConnectionsBalanceRequest getFinancialConnectionsBalanceRequest) throws ApiException {
        ApiResponse<GetFinancialConnectionsBalanceResponse> localVarResp = getFinancialConnectionsBalancesWithHttpInfo(getFinancialConnectionsBalanceRequest);
        return localVarResp.getData();
    }

    /**
     * Get balances
     * 
     * @param getFinancialConnectionsBalanceRequest  (required)
     * @return ApiResponse&lt;GetFinancialConnectionsBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionsBalanceResponse> getFinancialConnectionsBalancesWithHttpInfo(GetFinancialConnectionsBalanceRequest getFinancialConnectionsBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionsBalancesValidateBeforeCall(getFinancialConnectionsBalanceRequest, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get balances (asynchronously)
     * 
     * @param getFinancialConnectionsBalanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsBalancesAsync(GetFinancialConnectionsBalanceRequest getFinancialConnectionsBalanceRequest, final ApiCallback<GetFinancialConnectionsBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionsBalancesValidateBeforeCall(getFinancialConnectionsBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnectionsOwners
     * @param getFinancialConnectionsOwnersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsOwnersCall(GetFinancialConnectionsOwnersRequest getFinancialConnectionsOwnersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFinancialConnectionsOwnersRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/owners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionsOwnersValidateBeforeCall(GetFinancialConnectionsOwnersRequest getFinancialConnectionsOwnersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFinancialConnectionsOwnersRequest' is set
        if (getFinancialConnectionsOwnersRequest == null) {
            throw new ApiException("Missing the required parameter 'getFinancialConnectionsOwnersRequest' when calling getFinancialConnectionsOwners(Async)");
        }

        return getFinancialConnectionsOwnersCall(getFinancialConnectionsOwnersRequest, _callback);

    }

    /**
     * Get account owners
     * 
     * @param getFinancialConnectionsOwnersRequest  (required)
     * @return GetFinancialConnectionsOwnersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionsOwnersResponse getFinancialConnectionsOwners(GetFinancialConnectionsOwnersRequest getFinancialConnectionsOwnersRequest) throws ApiException {
        ApiResponse<GetFinancialConnectionsOwnersResponse> localVarResp = getFinancialConnectionsOwnersWithHttpInfo(getFinancialConnectionsOwnersRequest);
        return localVarResp.getData();
    }

    /**
     * Get account owners
     * 
     * @param getFinancialConnectionsOwnersRequest  (required)
     * @return ApiResponse&lt;GetFinancialConnectionsOwnersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionsOwnersResponse> getFinancialConnectionsOwnersWithHttpInfo(GetFinancialConnectionsOwnersRequest getFinancialConnectionsOwnersRequest) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionsOwnersValidateBeforeCall(getFinancialConnectionsOwnersRequest, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsOwnersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account owners (asynchronously)
     * 
     * @param getFinancialConnectionsOwnersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsOwnersAsync(GetFinancialConnectionsOwnersRequest getFinancialConnectionsOwnersRequest, final ApiCallback<GetFinancialConnectionsOwnersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionsOwnersValidateBeforeCall(getFinancialConnectionsOwnersRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsOwnersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialConnectionsTransactions
     * @param getFinancialConnectionsTransactionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsTransactionsCall(GetFinancialConnectionsTransactionsRequest getFinancialConnectionsTransactionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFinancialConnectionsTransactionsRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialConnectionsTransactionsValidateBeforeCall(GetFinancialConnectionsTransactionsRequest getFinancialConnectionsTransactionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getFinancialConnectionsTransactionsRequest' is set
        if (getFinancialConnectionsTransactionsRequest == null) {
            throw new ApiException("Missing the required parameter 'getFinancialConnectionsTransactionsRequest' when calling getFinancialConnectionsTransactions(Async)");
        }

        return getFinancialConnectionsTransactionsCall(getFinancialConnectionsTransactionsRequest, _callback);

    }

    /**
     * Get transactions
     * 
     * @param getFinancialConnectionsTransactionsRequest  (required)
     * @return GetFinancialConnectionsTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialConnectionsTransactionsResponse getFinancialConnectionsTransactions(GetFinancialConnectionsTransactionsRequest getFinancialConnectionsTransactionsRequest) throws ApiException {
        ApiResponse<GetFinancialConnectionsTransactionsResponse> localVarResp = getFinancialConnectionsTransactionsWithHttpInfo(getFinancialConnectionsTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * Get transactions
     * 
     * @param getFinancialConnectionsTransactionsRequest  (required)
     * @return ApiResponse&lt;GetFinancialConnectionsTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialConnectionsTransactionsResponse> getFinancialConnectionsTransactionsWithHttpInfo(GetFinancialConnectionsTransactionsRequest getFinancialConnectionsTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = getFinancialConnectionsTransactionsValidateBeforeCall(getFinancialConnectionsTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transactions (asynchronously)
     * 
     * @param getFinancialConnectionsTransactionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialConnectionsTransactionsAsync(GetFinancialConnectionsTransactionsRequest getFinancialConnectionsTransactionsRequest, final ApiCallback<GetFinancialConnectionsTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialConnectionsTransactionsValidateBeforeCall(getFinancialConnectionsTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialConnectionsTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinancialInstitution
     * @param institutionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial institution metadata </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialInstitutionCall(String institutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/institutions/{institution_id}"
            .replace("{" + "institution_id" + "}", localVarApiClient.escapeString(institutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinancialInstitutionValidateBeforeCall(String institutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionId' is set
        if (institutionId == null) {
            throw new ApiException("Missing the required parameter 'institutionId' when calling getFinancialInstitution(Async)");
        }

        return getFinancialInstitutionCall(institutionId, _callback);

    }

    /**
     * Get a financial institution
     * Receive metadata for a financial institution
     * @param institutionId  (required)
     * @return GetFinancialInstitutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial institution metadata </td><td>  -  </td></tr>
     </table>
     */
    public GetFinancialInstitutionResponse getFinancialInstitution(String institutionId) throws ApiException {
        ApiResponse<GetFinancialInstitutionResponse> localVarResp = getFinancialInstitutionWithHttpInfo(institutionId);
        return localVarResp.getData();
    }

    /**
     * Get a financial institution
     * Receive metadata for a financial institution
     * @param institutionId  (required)
     * @return ApiResponse&lt;GetFinancialInstitutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial institution metadata </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFinancialInstitutionResponse> getFinancialInstitutionWithHttpInfo(String institutionId) throws ApiException {
        okhttp3.Call localVarCall = getFinancialInstitutionValidateBeforeCall(institutionId, null);
        Type localVarReturnType = new TypeToken<GetFinancialInstitutionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a financial institution (asynchronously)
     * Receive metadata for a financial institution
     * @param institutionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Financial institution metadata </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinancialInstitutionAsync(String institutionId, final ApiCallback<GetFinancialInstitutionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinancialInstitutionValidateBeforeCall(institutionId, _callback);
        Type localVarReturnType = new TypeToken<GetFinancialInstitutionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvestmentHoldings
     * @param getInvestmentHoldingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvestmentHoldingsCall(GetInvestmentHoldingsRequest getInvestmentHoldingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getInvestmentHoldingsRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/investments/holdings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvestmentHoldingsValidateBeforeCall(GetInvestmentHoldingsRequest getInvestmentHoldingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getInvestmentHoldingsRequest' is set
        if (getInvestmentHoldingsRequest == null) {
            throw new ApiException("Missing the required parameter 'getInvestmentHoldingsRequest' when calling getInvestmentHoldings(Async)");
        }

        return getInvestmentHoldingsCall(getInvestmentHoldingsRequest, _callback);

    }

    /**
     * Get investment holdings
     * 
     * @param getInvestmentHoldingsRequest  (required)
     * @return GetInvestmentHoldingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetInvestmentHoldingsResponse getInvestmentHoldings(GetInvestmentHoldingsRequest getInvestmentHoldingsRequest) throws ApiException {
        ApiResponse<GetInvestmentHoldingsResponse> localVarResp = getInvestmentHoldingsWithHttpInfo(getInvestmentHoldingsRequest);
        return localVarResp.getData();
    }

    /**
     * Get investment holdings
     * 
     * @param getInvestmentHoldingsRequest  (required)
     * @return ApiResponse&lt;GetInvestmentHoldingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInvestmentHoldingsResponse> getInvestmentHoldingsWithHttpInfo(GetInvestmentHoldingsRequest getInvestmentHoldingsRequest) throws ApiException {
        okhttp3.Call localVarCall = getInvestmentHoldingsValidateBeforeCall(getInvestmentHoldingsRequest, null);
        Type localVarReturnType = new TypeToken<GetInvestmentHoldingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get investment holdings (asynchronously)
     * 
     * @param getInvestmentHoldingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvestmentHoldingsAsync(GetInvestmentHoldingsRequest getInvestmentHoldingsRequest, final ApiCallback<GetInvestmentHoldingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvestmentHoldingsValidateBeforeCall(getInvestmentHoldingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetInvestmentHoldingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvestmentTransactions
     * @param getInvestmentTransactionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvestmentTransactionsCall(GetInvestmentTransactionsRequest getInvestmentTransactionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getInvestmentTransactionsRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/investments/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvestmentTransactionsValidateBeforeCall(GetInvestmentTransactionsRequest getInvestmentTransactionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getInvestmentTransactionsRequest' is set
        if (getInvestmentTransactionsRequest == null) {
            throw new ApiException("Missing the required parameter 'getInvestmentTransactionsRequest' when calling getInvestmentTransactions(Async)");
        }

        return getInvestmentTransactionsCall(getInvestmentTransactionsRequest, _callback);

    }

    /**
     * Get investment transactions
     * 
     * @param getInvestmentTransactionsRequest  (required)
     * @return GetInvestmentTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetInvestmentTransactionsResponse getInvestmentTransactions(GetInvestmentTransactionsRequest getInvestmentTransactionsRequest) throws ApiException {
        ApiResponse<GetInvestmentTransactionsResponse> localVarResp = getInvestmentTransactionsWithHttpInfo(getInvestmentTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * Get investment transactions
     * 
     * @param getInvestmentTransactionsRequest  (required)
     * @return ApiResponse&lt;GetInvestmentTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInvestmentTransactionsResponse> getInvestmentTransactionsWithHttpInfo(GetInvestmentTransactionsRequest getInvestmentTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = getInvestmentTransactionsValidateBeforeCall(getInvestmentTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<GetInvestmentTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get investment transactions (asynchronously)
     * 
     * @param getInvestmentTransactionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvestmentTransactionsAsync(GetInvestmentTransactionsRequest getInvestmentTransactionsRequest, final ApiCallback<GetInvestmentTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvestmentTransactionsValidateBeforeCall(getInvestmentTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetInvestmentTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for migrateFinancialConnection
     * @param migrateFinancialConnectionsTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrateFinancialConnectionCall(MigrateFinancialConnectionsTokenRequest migrateFinancialConnectionsTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrateFinancialConnectionsTokenRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/migrate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call migrateFinancialConnectionValidateBeforeCall(MigrateFinancialConnectionsTokenRequest migrateFinancialConnectionsTokenRequest, final ApiCallback _callback) throws ApiException {
        return migrateFinancialConnectionCall(migrateFinancialConnectionsTokenRequest, _callback);

    }

    /**
     * Migrate financial connection
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection&#39;s data, access token, ID, and request ID.
     * @param migrateFinancialConnectionsTokenRequest  (optional)
     * @return MigrateFinancialConnectionsTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MigrateFinancialConnectionsTokenResponse migrateFinancialConnection(MigrateFinancialConnectionsTokenRequest migrateFinancialConnectionsTokenRequest) throws ApiException {
        ApiResponse<MigrateFinancialConnectionsTokenResponse> localVarResp = migrateFinancialConnectionWithHttpInfo(migrateFinancialConnectionsTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Migrate financial connection
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection&#39;s data, access token, ID, and request ID.
     * @param migrateFinancialConnectionsTokenRequest  (optional)
     * @return ApiResponse&lt;MigrateFinancialConnectionsTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrateFinancialConnectionsTokenResponse> migrateFinancialConnectionWithHttpInfo(MigrateFinancialConnectionsTokenRequest migrateFinancialConnectionsTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = migrateFinancialConnectionValidateBeforeCall(migrateFinancialConnectionsTokenRequest, null);
        Type localVarReturnType = new TypeToken<MigrateFinancialConnectionsTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrate financial connection (asynchronously)
     * This endpoint migrates financial connections from Plaid or MX into the unified Fuse API. It accepts a POST request with connection data, aggregator, entity, and Fuse products, and responds with a JSON payload containing the migrated connection&#39;s data, access token, ID, and request ID.
     * @param migrateFinancialConnectionsTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call migrateFinancialConnectionAsync(MigrateFinancialConnectionsTokenRequest migrateFinancialConnectionsTokenRequest, final ApiCallback<MigrateFinancialConnectionsTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = migrateFinancialConnectionValidateBeforeCall(migrateFinancialConnectionsTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<MigrateFinancialConnectionsTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshAssetReport
     * @param refreshAssetReportRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshAssetReportCall(RefreshAssetReportRequest refreshAssetReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshAssetReportRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/asset_report/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshAssetReportValidateBeforeCall(RefreshAssetReportRequest refreshAssetReportRequest, final ApiCallback _callback) throws ApiException {
        return refreshAssetReportCall(refreshAssetReportRequest, _callback);

    }

    /**
     * 
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param refreshAssetReportRequest  (optional)
     * @return AssetReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public AssetReportResponse refreshAssetReport(RefreshAssetReportRequest refreshAssetReportRequest) throws ApiException {
        ApiResponse<AssetReportResponse> localVarResp = refreshAssetReportWithHttpInfo(refreshAssetReportRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param refreshAssetReportRequest  (optional)
     * @return ApiResponse&lt;AssetReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetReportResponse> refreshAssetReportWithHttpInfo(RefreshAssetReportRequest refreshAssetReportRequest) throws ApiException {
        okhttp3.Call localVarCall = refreshAssetReportValidateBeforeCall(refreshAssetReportRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Refreshes the Asset Report in JSON format. For Plaid, you will need to have the assets product enabled on your plaid account.
     * @param refreshAssetReportRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshAssetReportAsync(RefreshAssetReportRequest refreshAssetReportRequest, final ApiCallback<AssetReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshAssetReportValidateBeforeCall(refreshAssetReportRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncFinancialConnectionsData
     * @param fuseVerification  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully synchronized transactions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncFinancialConnectionsDataCall(String fuseVerification, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fuseVerification != null) {
            localVarHeaderParams.put("Fuse-Verification", localVarApiClient.parameterToString(fuseVerification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncFinancialConnectionsDataValidateBeforeCall(String fuseVerification, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fuseVerification' is set
        if (fuseVerification == null) {
            throw new ApiException("Missing the required parameter 'fuseVerification' when calling syncFinancialConnectionsData(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling syncFinancialConnectionsData(Async)");
        }

        return syncFinancialConnectionsDataCall(fuseVerification, body, _callback);

    }

    /**
     * Sync financial connections data
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @param fuseVerification  (required)
     * @param body  (required)
     * @return SyncFinancialConnectionsDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully synchronized transactions </td><td>  -  </td></tr>
     </table>
     */
    public SyncFinancialConnectionsDataResponse syncFinancialConnectionsData(String fuseVerification, Object body) throws ApiException {
        ApiResponse<SyncFinancialConnectionsDataResponse> localVarResp = syncFinancialConnectionsDataWithHttpInfo(fuseVerification, body);
        return localVarResp.getData();
    }

    /**
     * Sync financial connections data
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @param fuseVerification  (required)
     * @param body  (required)
     * @return ApiResponse&lt;SyncFinancialConnectionsDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully synchronized transactions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncFinancialConnectionsDataResponse> syncFinancialConnectionsDataWithHttpInfo(String fuseVerification, Object body) throws ApiException {
        okhttp3.Call localVarCall = syncFinancialConnectionsDataValidateBeforeCall(fuseVerification, body, null);
        Type localVarReturnType = new TypeToken<SyncFinancialConnectionsDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync financial connections data (asynchronously)
     * Call this endpoint upon receiving a financial_connection.sync_data webhook. This will keep the financial connections data up to date.
     * @param fuseVerification  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully synchronized transactions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncFinancialConnectionsDataAsync(String fuseVerification, Object body, final ApiCallback<SyncFinancialConnectionsDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncFinancialConnectionsDataValidateBeforeCall(fuseVerification, body, _callback);
        Type localVarReturnType = new TypeToken<SyncFinancialConnectionsDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConsumerRiskReportCustomization
     * @param consumerRiskReportCustomizationId  (required)
     * @param updateConsumerRiskReportCustomizationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConsumerRiskReportCustomizationCall(String consumerRiskReportCustomizationId, UpdateConsumerRiskReportCustomizationRequest updateConsumerRiskReportCustomizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConsumerRiskReportCustomizationRequest;

        // create path and map variables
        String localVarPath = "/v1/risk_report/consumer/customization/{consumer_risk_report_customization_id}"
            .replace("{" + "consumer_risk_report_customization_id" + "}", localVarApiClient.escapeString(consumerRiskReportCustomizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConsumerRiskReportCustomizationValidateBeforeCall(String consumerRiskReportCustomizationId, UpdateConsumerRiskReportCustomizationRequest updateConsumerRiskReportCustomizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consumerRiskReportCustomizationId' is set
        if (consumerRiskReportCustomizationId == null) {
            throw new ApiException("Missing the required parameter 'consumerRiskReportCustomizationId' when calling updateConsumerRiskReportCustomization(Async)");
        }

        return updateConsumerRiskReportCustomizationCall(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, _callback);

    }

    /**
     * Update consumer risk report customization
     * 
     * @param consumerRiskReportCustomizationId  (required)
     * @param updateConsumerRiskReportCustomizationRequest  (optional)
     * @return UpdateConsumerRiskReportCustomizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConsumerRiskReportCustomizationResponse updateConsumerRiskReportCustomization(String consumerRiskReportCustomizationId, UpdateConsumerRiskReportCustomizationRequest updateConsumerRiskReportCustomizationRequest) throws ApiException {
        ApiResponse<UpdateConsumerRiskReportCustomizationResponse> localVarResp = updateConsumerRiskReportCustomizationWithHttpInfo(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest);
        return localVarResp.getData();
    }

    /**
     * Update consumer risk report customization
     * 
     * @param consumerRiskReportCustomizationId  (required)
     * @param updateConsumerRiskReportCustomizationRequest  (optional)
     * @return ApiResponse&lt;UpdateConsumerRiskReportCustomizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConsumerRiskReportCustomizationResponse> updateConsumerRiskReportCustomizationWithHttpInfo(String consumerRiskReportCustomizationId, UpdateConsumerRiskReportCustomizationRequest updateConsumerRiskReportCustomizationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateConsumerRiskReportCustomizationValidateBeforeCall(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, null);
        Type localVarReturnType = new TypeToken<UpdateConsumerRiskReportCustomizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update consumer risk report customization (asynchronously)
     * 
     * @param consumerRiskReportCustomizationId  (required)
     * @param updateConsumerRiskReportCustomizationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConsumerRiskReportCustomizationAsync(String consumerRiskReportCustomizationId, UpdateConsumerRiskReportCustomizationRequest updateConsumerRiskReportCustomizationRequest, final ApiCallback<UpdateConsumerRiskReportCustomizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConsumerRiskReportCustomizationValidateBeforeCall(consumerRiskReportCustomizationId, updateConsumerRiskReportCustomizationRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateConsumerRiskReportCustomizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FinancialConnectionsLiabilitiesPost
     * @param getLiabilitiesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FinancialConnectionsLiabilitiesPostCall(GetLiabilitiesRequest getLiabilitiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLiabilitiesRequest;

        // create path and map variables
        String localVarPath = "/v1/financial_connections/liabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "fuseApiKey", "fuseClientId" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FinancialConnectionsLiabilitiesPostValidateBeforeCall(GetLiabilitiesRequest getLiabilitiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getLiabilitiesRequest' is set
        if (getLiabilitiesRequest == null) {
            throw new ApiException("Missing the required parameter 'getLiabilitiesRequest' when calling v1FinancialConnectionsLiabilitiesPost(Async)");
        }

        return v1FinancialConnectionsLiabilitiesPostCall(getLiabilitiesRequest, _callback);

    }

    /**
     * Get liabilities
     * 
     * @param getLiabilitiesRequest  (required)
     * @return GetLiabilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetLiabilitiesResponse v1FinancialConnectionsLiabilitiesPost(GetLiabilitiesRequest getLiabilitiesRequest) throws ApiException {
        ApiResponse<GetLiabilitiesResponse> localVarResp = v1FinancialConnectionsLiabilitiesPostWithHttpInfo(getLiabilitiesRequest);
        return localVarResp.getData();
    }

    /**
     * Get liabilities
     * 
     * @param getLiabilitiesRequest  (required)
     * @return ApiResponse&lt;GetLiabilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLiabilitiesResponse> v1FinancialConnectionsLiabilitiesPostWithHttpInfo(GetLiabilitiesRequest getLiabilitiesRequest) throws ApiException {
        okhttp3.Call localVarCall = v1FinancialConnectionsLiabilitiesPostValidateBeforeCall(getLiabilitiesRequest, null);
        Type localVarReturnType = new TypeToken<GetLiabilitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get liabilities (asynchronously)
     * 
     * @param getLiabilitiesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FinancialConnectionsLiabilitiesPostAsync(GetLiabilitiesRequest getLiabilitiesRequest, final ApiCallback<GetLiabilitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FinancialConnectionsLiabilitiesPostValidateBeforeCall(getLiabilitiesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetLiabilitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
