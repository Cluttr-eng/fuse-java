/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * FinancialConnectionsAccountDetailsAch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-23T12:03:45.546785Z[UTC]")
public class FinancialConnectionsAccountDetailsAch {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ROUTING = "routing";
  @SerializedName(SERIALIZED_NAME_ROUTING)
  private String routing;

  public static final String SERIALIZED_NAME_WIRE_ROUTING = "wire_routing";
  @SerializedName(SERIALIZED_NAME_WIRE_ROUTING)
  private String wireRouting;

  public static final String SERIALIZED_NAME_BACS_ROUTING = "bacs_routing";
  @SerializedName(SERIALIZED_NAME_BACS_ROUTING)
  private String bacsRouting;

  public FinancialConnectionsAccountDetailsAch() {
  }

  public FinancialConnectionsAccountDetailsAch account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Account number
   * @return account
  **/
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public FinancialConnectionsAccountDetailsAch routing(String routing) {
    this.routing = routing;
    return this;
  }

   /**
   * Routing number
   * @return routing
  **/
  @javax.annotation.Nullable
  public String getRouting() {
    return routing;
  }

  public void setRouting(String routing) {
    this.routing = routing;
  }


  public FinancialConnectionsAccountDetailsAch wireRouting(String wireRouting) {
    this.wireRouting = wireRouting;
    return this;
  }

   /**
   * Wire routing number
   * @return wireRouting
  **/
  @javax.annotation.Nullable
  public String getWireRouting() {
    return wireRouting;
  }

  public void setWireRouting(String wireRouting) {
    this.wireRouting = wireRouting;
  }


  public FinancialConnectionsAccountDetailsAch bacsRouting(String bacsRouting) {
    this.bacsRouting = bacsRouting;
    return this;
  }

   /**
   * BACS routing number
   * @return bacsRouting
  **/
  @javax.annotation.Nullable
  public String getBacsRouting() {
    return bacsRouting;
  }

  public void setBacsRouting(String bacsRouting) {
    this.bacsRouting = bacsRouting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialConnectionsAccountDetailsAch financialConnectionsAccountDetailsAch = (FinancialConnectionsAccountDetailsAch) o;
    return Objects.equals(this.account, financialConnectionsAccountDetailsAch.account) &&
        Objects.equals(this.routing, financialConnectionsAccountDetailsAch.routing) &&
        Objects.equals(this.wireRouting, financialConnectionsAccountDetailsAch.wireRouting) &&
        Objects.equals(this.bacsRouting, financialConnectionsAccountDetailsAch.bacsRouting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, routing, wireRouting, bacsRouting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialConnectionsAccountDetailsAch {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("    wireRouting: ").append(toIndentedString(wireRouting)).append("\n");
    sb.append("    bacsRouting: ").append(toIndentedString(bacsRouting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("routing");
    openapiFields.add("wire_routing");
    openapiFields.add("bacs_routing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FinancialConnectionsAccountDetailsAch
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinancialConnectionsAccountDetailsAch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinancialConnectionsAccountDetailsAch is not found in the empty JSON string", FinancialConnectionsAccountDetailsAch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FinancialConnectionsAccountDetailsAch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinancialConnectionsAccountDetailsAch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("routing") != null && !jsonObj.get("routing").isJsonNull()) && !jsonObj.get("routing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing").toString()));
      }
      if ((jsonObj.get("wire_routing") != null && !jsonObj.get("wire_routing").isJsonNull()) && !jsonObj.get("wire_routing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wire_routing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wire_routing").toString()));
      }
      if ((jsonObj.get("bacs_routing") != null && !jsonObj.get("bacs_routing").isJsonNull()) && !jsonObj.get("bacs_routing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bacs_routing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bacs_routing").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinancialConnectionsAccountDetailsAch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinancialConnectionsAccountDetailsAch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinancialConnectionsAccountDetailsAch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinancialConnectionsAccountDetailsAch.class));

       return (TypeAdapter<T>) new TypeAdapter<FinancialConnectionsAccountDetailsAch>() {
           @Override
           public void write(JsonWriter out, FinancialConnectionsAccountDetailsAch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinancialConnectionsAccountDetailsAch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FinancialConnectionsAccountDetailsAch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FinancialConnectionsAccountDetailsAch
  * @throws IOException if the JSON string is invalid with respect to FinancialConnectionsAccountDetailsAch
  */
  public static FinancialConnectionsAccountDetailsAch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinancialConnectionsAccountDetailsAch.class);
  }

 /**
  * Convert an instance of FinancialConnectionsAccountDetailsAch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

