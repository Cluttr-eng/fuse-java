/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * CreateConsumerRiskReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-12T15:13:43.182056Z[UTC]")
public class CreateConsumerRiskReportRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ISO_CURRENCY_CODE = "iso_currency_code";
  @SerializedName(SERIALIZED_NAME_ISO_CURRENCY_CODE)
  private String isoCurrencyCode;

  public static final String SERIALIZED_NAME_END_USER_NAME = "end_user_name";
  @SerializedName(SERIALIZED_NAME_END_USER_NAME)
  private String endUserName;

  public static final String SERIALIZED_NAME_CUSTOMIZATION_ID = "customization_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZATION_ID)
  private String customizationId;

  public CreateConsumerRiskReportRequest() {
  }

  public CreateConsumerRiskReportRequest accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * A unique ID representing the bank account that this risk report is calculated for. Typically this will be a bank connection account ID from your application. It is currently used as a means of connecting events to the consumer risk report.
   * @return accountId
  **/
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateConsumerRiskReportRequest isoCurrencyCode(String isoCurrencyCode) {
    
    this.isoCurrencyCode = isoCurrencyCode;
    return this;
  }

   /**
   * The ISO-4217 currency code of the transaction
   * @return isoCurrencyCode
  **/
  @javax.annotation.Nonnull
  public String getIsoCurrencyCode() {
    return isoCurrencyCode;
  }


  public void setIsoCurrencyCode(String isoCurrencyCode) {
    this.isoCurrencyCode = isoCurrencyCode;
  }


  public CreateConsumerRiskReportRequest endUserName(String endUserName) {
    
    this.endUserName = endUserName;
    return this;
  }

   /**
   * The name of the end user associated with this consumer risk report.
   * @return endUserName
  **/
  @javax.annotation.Nullable
  public String getEndUserName() {
    return endUserName;
  }


  public void setEndUserName(String endUserName) {
    this.endUserName = endUserName;
  }


  public CreateConsumerRiskReportRequest customizationId(String customizationId) {
    
    this.customizationId = customizationId;
    return this;
  }

   /**
   * This is used to determine the timeframe and other metadata for the consumer risk report.
   * @return customizationId
  **/
  @javax.annotation.Nonnull
  public String getCustomizationId() {
    return customizationId;
  }


  public void setCustomizationId(String customizationId) {
    this.customizationId = customizationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConsumerRiskReportRequest createConsumerRiskReportRequest = (CreateConsumerRiskReportRequest) o;
    return Objects.equals(this.accountId, createConsumerRiskReportRequest.accountId) &&
        Objects.equals(this.isoCurrencyCode, createConsumerRiskReportRequest.isoCurrencyCode) &&
        Objects.equals(this.endUserName, createConsumerRiskReportRequest.endUserName) &&
        Objects.equals(this.customizationId, createConsumerRiskReportRequest.customizationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, isoCurrencyCode, endUserName, customizationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConsumerRiskReportRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    isoCurrencyCode: ").append(toIndentedString(isoCurrencyCode)).append("\n");
    sb.append("    endUserName: ").append(toIndentedString(endUserName)).append("\n");
    sb.append("    customizationId: ").append(toIndentedString(customizationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("iso_currency_code");
    openapiFields.add("end_user_name");
    openapiFields.add("customization_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("iso_currency_code");
    openapiRequiredFields.add("customization_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateConsumerRiskReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConsumerRiskReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConsumerRiskReportRequest is not found in the empty JSON string", CreateConsumerRiskReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateConsumerRiskReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConsumerRiskReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConsumerRiskReportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("iso_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_currency_code").toString()));
      }
      if ((jsonObj.get("end_user_name") != null && !jsonObj.get("end_user_name").isJsonNull()) && !jsonObj.get("end_user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_user_name").toString()));
      }
      if (!jsonObj.get("customization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customization_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConsumerRiskReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConsumerRiskReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConsumerRiskReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConsumerRiskReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConsumerRiskReportRequest>() {
           @Override
           public void write(JsonWriter out, CreateConsumerRiskReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConsumerRiskReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateConsumerRiskReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateConsumerRiskReportRequest
  * @throws IOException if the JSON string is invalid with respect to CreateConsumerRiskReportRequest
  */
  public static CreateConsumerRiskReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConsumerRiskReportRequest.class);
  }

 /**
  * Convert an instance of CreateConsumerRiskReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

