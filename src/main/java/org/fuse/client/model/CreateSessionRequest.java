/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fuse.client.model.Aggregator;
import org.fuse.client.model.CountryCode;
import org.fuse.client.model.Entity;
import org.fuse.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * CreateSessionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-12T14:48:18.188409Z[UTC]")
public class CreateSessionRequest {
  public static final String SERIALIZED_NAME_SUPPORTED_FINANCIAL_INSTITUTION_AGGREGATORS = "supported_financial_institution_aggregators";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_FINANCIAL_INSTITUTION_AGGREGATORS)
  private List<Aggregator> supportedFinancialInstitutionAggregators = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Product> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY_CODES = "country_codes";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODES)
  private List<CountryCode> countryCodes;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private Entity entity;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_IS_WEB_VIEW = "is_web_view";
  @SerializedName(SERIALIZED_NAME_IS_WEB_VIEW)
  private Boolean isWebView;

  public CreateSessionRequest() {
  }

  public CreateSessionRequest supportedFinancialInstitutionAggregators(List<Aggregator> supportedFinancialInstitutionAggregators) {
    
    this.supportedFinancialInstitutionAggregators = supportedFinancialInstitutionAggregators;
    return this;
  }

  public CreateSessionRequest addSupportedFinancialInstitutionAggregatorsItem(Aggregator supportedFinancialInstitutionAggregatorsItem) {
    if (this.supportedFinancialInstitutionAggregators == null) {
      this.supportedFinancialInstitutionAggregators = new ArrayList<>();
    }
    this.supportedFinancialInstitutionAggregators.add(supportedFinancialInstitutionAggregatorsItem);
    return this;
  }

   /**
   * Get supportedFinancialInstitutionAggregators
   * @return supportedFinancialInstitutionAggregators
  **/
  @javax.annotation.Nonnull
  public List<Aggregator> getSupportedFinancialInstitutionAggregators() {
    return supportedFinancialInstitutionAggregators;
  }


  public void setSupportedFinancialInstitutionAggregators(List<Aggregator> supportedFinancialInstitutionAggregators) {
    this.supportedFinancialInstitutionAggregators = supportedFinancialInstitutionAggregators;
  }


  public CreateSessionRequest products(List<Product> products) {
    
    this.products = products;
    return this;
  }

  public CreateSessionRequest addProductsItem(Product productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * List of products that you would like the institutions to support
   * @return products
  **/
  @javax.annotation.Nonnull
  public List<Product> getProducts() {
    return products;
  }


  public void setProducts(List<Product> products) {
    this.products = products;
  }


  public CreateSessionRequest countryCodes(List<CountryCode> countryCodes) {
    
    this.countryCodes = countryCodes;
    return this;
  }

  public CreateSessionRequest addCountryCodesItem(CountryCode countryCodesItem) {
    if (this.countryCodes == null) {
      this.countryCodes = new ArrayList<>();
    }
    this.countryCodes.add(countryCodesItem);
    return this;
  }

   /**
   * List of country codes that you would like the institutions to support
   * @return countryCodes
  **/
  @javax.annotation.Nullable
  public List<CountryCode> getCountryCodes() {
    return countryCodes;
  }


  public void setCountryCodes(List<CountryCode> countryCodes) {
    this.countryCodes = countryCodes;
  }


  public CreateSessionRequest entity(Entity entity) {
    
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nonnull
  public Entity getEntity() {
    return entity;
  }


  public void setEntity(Entity entity) {
    this.entity = entity;
  }


  public CreateSessionRequest accessToken(String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * The fuse access token for an existing financial connection. This will perform the process to reconnect an existing disconnected account.
   * @return accessToken
  **/
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public CreateSessionRequest isWebView(Boolean isWebView) {
    
    this.isWebView = isWebView;
    return this;
  }

   /**
   * Set to false for web SDKs (e.g., React), and true for mobile SDKs (e.g., React Native, Flutter, iOS, Android).
   * @return isWebView
  **/
  @javax.annotation.Nullable
  public Boolean getIsWebView() {
    return isWebView;
  }


  public void setIsWebView(Boolean isWebView) {
    this.isWebView = isWebView;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSessionRequest createSessionRequest = (CreateSessionRequest) o;
    return Objects.equals(this.supportedFinancialInstitutionAggregators, createSessionRequest.supportedFinancialInstitutionAggregators) &&
        Objects.equals(this.products, createSessionRequest.products) &&
        Objects.equals(this.countryCodes, createSessionRequest.countryCodes) &&
        Objects.equals(this.entity, createSessionRequest.entity) &&
        Objects.equals(this.accessToken, createSessionRequest.accessToken) &&
        Objects.equals(this.isWebView, createSessionRequest.isWebView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supportedFinancialInstitutionAggregators, products, countryCodes, entity, accessToken, isWebView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSessionRequest {\n");
    sb.append("    supportedFinancialInstitutionAggregators: ").append(toIndentedString(supportedFinancialInstitutionAggregators)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    countryCodes: ").append(toIndentedString(countryCodes)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    isWebView: ").append(toIndentedString(isWebView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("supported_financial_institution_aggregators");
    openapiFields.add("products");
    openapiFields.add("country_codes");
    openapiFields.add("entity");
    openapiFields.add("access_token");
    openapiFields.add("is_web_view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("supported_financial_institution_aggregators");
    openapiRequiredFields.add("products");
    openapiRequiredFields.add("entity");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateSessionRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSessionRequest is not found in the empty JSON string", CreateSessionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateSessionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSessionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSessionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("supported_financial_institution_aggregators") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_financial_institution_aggregators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_financial_institution_aggregators` to be an array in the JSON string but got `%s`", jsonObj.get("supported_financial_institution_aggregators").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("products") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("country_codes") != null && !jsonObj.get("country_codes").isJsonNull() && !jsonObj.get("country_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_codes` to be an array in the JSON string but got `%s`", jsonObj.get("country_codes").toString()));
      }
      // validate the required field `entity`
      Entity.validateJsonElement(jsonObj.get("entity"));
      if ((jsonObj.get("access_token") != null && !jsonObj.get("access_token").isJsonNull()) && !jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSessionRequest>() {
           @Override
           public void write(JsonWriter out, CreateSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSessionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateSessionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateSessionRequest
  * @throws IOException if the JSON string is invalid with respect to CreateSessionRequest
  */
  public static CreateSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSessionRequest.class);
  }

 /**
  * Convert an instance of CreateSessionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

