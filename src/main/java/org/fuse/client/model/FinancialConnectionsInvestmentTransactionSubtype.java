/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets FinancialConnectionsInvestmentTransactionSubtype
 */
@JsonAdapter(FinancialConnectionsInvestmentTransactionSubtype.Adapter.class)
public enum FinancialConnectionsInvestmentTransactionSubtype {
  
  ACCOUNT_FEE("account_fee"),
  
  ADJUSTMENT("adjustment"),
  
  ASSIGNMENT("assignment"),
  
  BUY("buy"),
  
  BUY_TO_COVER("buy_to_cover"),
  
  CONTRIBUTION("contribution"),
  
  DEPOSIT("deposit"),
  
  DISTRIBUTION("distribution"),
  
  DIVIDEND("dividend"),
  
  DIVIDEND_REINVESTMENT("dividend_reinvestment"),
  
  EXERCISE("exercise"),
  
  EXPIRE("expire"),
  
  FUND_FEE("fund_fee"),
  
  INTEREST("interest"),
  
  INTEREST_RECEIVABLE("interest_receivable"),
  
  INTEREST_REINVESTMENT("interest_reinvestment"),
  
  LEGAL_FEE("legal_fee"),
  
  LOAN_PAYMENT("loan_payment"),
  
  LONG_TERM_CAPITAL_GAIN("long_term_capital_gain"),
  
  LONG_TERM_CAPITAL_GAIN_REINVESTMENT("long_term_capital_gain_reinvestment"),
  
  MANAGEMENT_FEE("management_fee"),
  
  MARGIN_EXPENSE("margin_expense"),
  
  MERGER("merger"),
  
  MISCELLANEOUS_FEE("miscellaneous_fee"),
  
  NON_QUALIFIED_DIVIDEND("non_qualified_dividend"),
  
  NON_RESIDENT_TAX("non_resident_tax"),
  
  PENDING_CREDIT("pending_credit"),
  
  PENDING_DEBIT("pending_debit"),
  
  QUALIFIED_DIVIDEND("qualified_dividend"),
  
  REBALANCE("rebalance"),
  
  RETURN_OF_PRINCIPAL("return_of_principal"),
  
  REQUEST("request"),
  
  SELL("sell"),
  
  SELL_SHORT("sell_short"),
  
  SEND("send"),
  
  SHORT_TERM_CAPITAL_GAIN("short_term_capital_gain"),
  
  SHORT_TERM_CAPITAL_GAIN_REINVESTMENT("short_term_capital_gain_reinvestment"),
  
  SPIN_OFF("spin_off"),
  
  SPLIT("split"),
  
  STOCK_DISTRIBUTION("stock_distribution"),
  
  TAX("tax"),
  
  TAX_WITHHELD("tax_withheld"),
  
  TRADE("trade"),
  
  TRANSFER("transfer"),
  
  TRANSFER_FEE("transfer_fee"),
  
  TRUST_FEE("trust_fee"),
  
  UNQUALIFIED_GAIN("unqualified_gain"),
  
  WITHDRAWAL("withdrawal"),
  
  MINUS("-");

  private String value;

  FinancialConnectionsInvestmentTransactionSubtype(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FinancialConnectionsInvestmentTransactionSubtype fromValue(String value) {
    for (FinancialConnectionsInvestmentTransactionSubtype b : FinancialConnectionsInvestmentTransactionSubtype.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FinancialConnectionsInvestmentTransactionSubtype> {
    @Override
    public void write(final JsonWriter jsonWriter, final FinancialConnectionsInvestmentTransactionSubtype enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FinancialConnectionsInvestmentTransactionSubtype read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FinancialConnectionsInvestmentTransactionSubtype.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FinancialConnectionsInvestmentTransactionSubtype.fromValue(value);
  }
}

