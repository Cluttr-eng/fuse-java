/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fuse.client.model.Aggregator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * UpdateEntityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-12T15:13:43.182056Z[UTC]")
public class UpdateEntityResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_AGGREGATORS = "aggregators";
  @SerializedName(SERIALIZED_NAME_AGGREGATORS)
  private List<Aggregator> aggregators;

  public static final String SERIALIZED_NAME_INSTITUTION_IDS = "institution_ids";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_IDS)
  private List<String> institutionIds;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public UpdateEntityResponse() {
  }

  public UpdateEntityResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the entity
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UpdateEntityResponse email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email of the entity
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public UpdateEntityResponse aggregators(List<Aggregator> aggregators) {
    
    this.aggregators = aggregators;
    return this;
  }

  public UpdateEntityResponse addAggregatorsItem(Aggregator aggregatorsItem) {
    if (this.aggregators == null) {
      this.aggregators = new ArrayList<>();
    }
    this.aggregators.add(aggregatorsItem);
    return this;
  }

   /**
   * These will force the user to connect through all of these aggregators
   * @return aggregators
  **/
  @javax.annotation.Nullable
  public List<Aggregator> getAggregators() {
    return aggregators;
  }


  public void setAggregators(List<Aggregator> aggregators) {
    this.aggregators = aggregators;
  }


  public UpdateEntityResponse institutionIds(List<String> institutionIds) {
    
    this.institutionIds = institutionIds;
    return this;
  }

  public UpdateEntityResponse addInstitutionIdsItem(String institutionIdsItem) {
    if (this.institutionIds == null) {
      this.institutionIds = new ArrayList<>();
    }
    this.institutionIds.add(institutionIdsItem);
    return this;
  }

   /**
   * Get institutionIds
   * @return institutionIds
  **/
  @javax.annotation.Nullable
  public List<String> getInstitutionIds() {
    return institutionIds;
  }


  public void setInstitutionIds(List<String> institutionIds) {
    this.institutionIds = institutionIds;
  }


  public UpdateEntityResponse requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEntityResponse updateEntityResponse = (UpdateEntityResponse) o;
    return Objects.equals(this.id, updateEntityResponse.id) &&
        Objects.equals(this.email, updateEntityResponse.email) &&
        Objects.equals(this.aggregators, updateEntityResponse.aggregators) &&
        Objects.equals(this.institutionIds, updateEntityResponse.institutionIds) &&
        Objects.equals(this.requestId, updateEntityResponse.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, aggregators, institutionIds, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEntityResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    aggregators: ").append(toIndentedString(aggregators)).append("\n");
    sb.append("    institutionIds: ").append(toIndentedString(institutionIds)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("aggregators");
    openapiFields.add("institution_ids");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateEntityResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEntityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEntityResponse is not found in the empty JSON string", UpdateEntityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateEntityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEntityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aggregators") != null && !jsonObj.get("aggregators").isJsonNull() && !jsonObj.get("aggregators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregators` to be an array in the JSON string but got `%s`", jsonObj.get("aggregators").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("institution_ids") != null && !jsonObj.get("institution_ids").isJsonNull() && !jsonObj.get("institution_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_ids` to be an array in the JSON string but got `%s`", jsonObj.get("institution_ids").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEntityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEntityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEntityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEntityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEntityResponse>() {
           @Override
           public void write(JsonWriter out, UpdateEntityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEntityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateEntityResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateEntityResponse
  * @throws IOException if the JSON string is invalid with respect to UpdateEntityResponse
  */
  public static UpdateEntityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEntityResponse.class);
  }

 /**
  * Convert an instance of UpdateEntityResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

