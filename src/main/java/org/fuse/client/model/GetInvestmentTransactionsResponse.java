/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fuse.client.model.FinancialConnectionsAccount;
import org.fuse.client.model.FinancialConnectionsInvestmentTransaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * GetInvestmentTransactionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-12T15:13:43.182056Z[UTC]")
public class GetInvestmentTransactionsResponse {
  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List<FinancialConnectionsAccount> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVESTMENT_TRANSACTIONS = "investment_transactions";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_TRANSACTIONS)
  private List<FinancialConnectionsInvestmentTransaction> investmentTransactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_TRANSACTIONS = "total_transactions";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRANSACTIONS)
  private BigDecimal totalTransactions;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public GetInvestmentTransactionsResponse() {
  }

  public GetInvestmentTransactionsResponse accounts(List<FinancialConnectionsAccount> accounts) {
    
    this.accounts = accounts;
    return this;
  }

  public GetInvestmentTransactionsResponse addAccountsItem(FinancialConnectionsAccount accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Get accounts
   * @return accounts
  **/
  @javax.annotation.Nonnull
  public List<FinancialConnectionsAccount> getAccounts() {
    return accounts;
  }


  public void setAccounts(List<FinancialConnectionsAccount> accounts) {
    this.accounts = accounts;
  }


  public GetInvestmentTransactionsResponse investmentTransactions(List<FinancialConnectionsInvestmentTransaction> investmentTransactions) {
    
    this.investmentTransactions = investmentTransactions;
    return this;
  }

  public GetInvestmentTransactionsResponse addInvestmentTransactionsItem(FinancialConnectionsInvestmentTransaction investmentTransactionsItem) {
    if (this.investmentTransactions == null) {
      this.investmentTransactions = new ArrayList<>();
    }
    this.investmentTransactions.add(investmentTransactionsItem);
    return this;
  }

   /**
   * Get investmentTransactions
   * @return investmentTransactions
  **/
  @javax.annotation.Nonnull
  public List<FinancialConnectionsInvestmentTransaction> getInvestmentTransactions() {
    return investmentTransactions;
  }


  public void setInvestmentTransactions(List<FinancialConnectionsInvestmentTransaction> investmentTransactions) {
    this.investmentTransactions = investmentTransactions;
  }


  public GetInvestmentTransactionsResponse totalTransactions(BigDecimal totalTransactions) {
    
    this.totalTransactions = totalTransactions;
    return this;
  }

   /**
   * The total number of transactions within the specified date range.
   * @return totalTransactions
  **/
  @javax.annotation.Nullable
  public BigDecimal getTotalTransactions() {
    return totalTransactions;
  }


  public void setTotalTransactions(BigDecimal totalTransactions) {
    this.totalTransactions = totalTransactions;
  }


  public GetInvestmentTransactionsResponse requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
   * @return requestId
  **/
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetInvestmentTransactionsResponse getInvestmentTransactionsResponse = (GetInvestmentTransactionsResponse) o;
    return Objects.equals(this.accounts, getInvestmentTransactionsResponse.accounts) &&
        Objects.equals(this.investmentTransactions, getInvestmentTransactionsResponse.investmentTransactions) &&
        Objects.equals(this.totalTransactions, getInvestmentTransactionsResponse.totalTransactions) &&
        Objects.equals(this.requestId, getInvestmentTransactionsResponse.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, investmentTransactions, totalTransactions, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInvestmentTransactionsResponse {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    investmentTransactions: ").append(toIndentedString(investmentTransactions)).append("\n");
    sb.append("    totalTransactions: ").append(toIndentedString(totalTransactions)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts");
    openapiFields.add("investment_transactions");
    openapiFields.add("total_transactions");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accounts");
    openapiRequiredFields.add("investment_transactions");
    openapiRequiredFields.add("request_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetInvestmentTransactionsResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetInvestmentTransactionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetInvestmentTransactionsResponse is not found in the empty JSON string", GetInvestmentTransactionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetInvestmentTransactionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetInvestmentTransactionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetInvestmentTransactionsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("accounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
      }

      JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
      // validate the required field `accounts` (array)
      for (int i = 0; i < jsonArrayaccounts.size(); i++) {
        FinancialConnectionsAccount.validateJsonElement(jsonArrayaccounts.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("investment_transactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `investment_transactions` to be an array in the JSON string but got `%s`", jsonObj.get("investment_transactions").toString()));
      }

      JsonArray jsonArrayinvestmentTransactions = jsonObj.getAsJsonArray("investment_transactions");
      // validate the required field `investment_transactions` (array)
      for (int i = 0; i < jsonArrayinvestmentTransactions.size(); i++) {
        FinancialConnectionsInvestmentTransaction.validateJsonElement(jsonArrayinvestmentTransactions.get(i));
      };
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetInvestmentTransactionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetInvestmentTransactionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetInvestmentTransactionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetInvestmentTransactionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetInvestmentTransactionsResponse>() {
           @Override
           public void write(JsonWriter out, GetInvestmentTransactionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetInvestmentTransactionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetInvestmentTransactionsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetInvestmentTransactionsResponse
  * @throws IOException if the JSON string is invalid with respect to GetInvestmentTransactionsResponse
  */
  public static GetInvestmentTransactionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetInvestmentTransactionsResponse.class);
  }

 /**
  * Convert an instance of GetInvestmentTransactionsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

