/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fuse.client.model.WebhookSource;
import org.fuse.client.model.WebhookType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * WebhookEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-12T14:48:18.188409Z[UTC]")
public class WebhookEvent {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private WebhookType type;

  public static final String SERIALIZED_NAME_FINANCIAL_CONNECTION_ID = "financial_connection_id";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_CONNECTION_ID)
  private String financialConnectionId;

  /**
   * Gets or Sets environment
   */
  @JsonAdapter(EnvironmentEnum.Adapter.class)
  public enum EnvironmentEnum {
    SANDBOX("sandbox"),
    
    PRODUCTION("production");

    private String value;

    EnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentEnum fromValue(String value) {
      for (EnvironmentEnum b : EnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private EnvironmentEnum environment;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private WebhookSource source;

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verification_token";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  private String verificationToken;

  public static final String SERIALIZED_NAME_ASSET_REPORT_ID = "asset_report_id";
  @SerializedName(SERIALIZED_NAME_ASSET_REPORT_ID)
  private String assetReportId;

  public static final String SERIALIZED_NAME_HISTORICAL_TRANSACTIONS_AVAILABLE = "historical_transactions_available";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_TRANSACTIONS_AVAILABLE)
  private Boolean historicalTransactionsAvailable;

  public static final String SERIALIZED_NAME_REMOVED_TRANSACTION_IDS = "removed_transaction_ids";
  @SerializedName(SERIALIZED_NAME_REMOVED_TRANSACTION_IDS)
  private List<String> removedTransactionIds;

  public static final String SERIALIZED_NAME_REMOTE_DATA = "remote_data";
  @SerializedName(SERIALIZED_NAME_REMOTE_DATA)
  private Object remoteData = null;

  public WebhookEvent() {
  }

  public WebhookEvent type(WebhookType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public WebhookType getType() {
    return type;
  }


  public void setType(WebhookType type) {
    this.type = type;
  }


  public WebhookEvent financialConnectionId(String financialConnectionId) {
    
    this.financialConnectionId = financialConnectionId;
    return this;
  }

   /**
   * Financial connection id associated with the webhook
   * @return financialConnectionId
  **/
  @javax.annotation.Nonnull
  public String getFinancialConnectionId() {
    return financialConnectionId;
  }


  public void setFinancialConnectionId(String financialConnectionId) {
    this.financialConnectionId = financialConnectionId;
  }


  public WebhookEvent environment(EnvironmentEnum environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nonnull
  public EnvironmentEnum getEnvironment() {
    return environment;
  }


  public void setEnvironment(EnvironmentEnum environment) {
    this.environment = environment;
  }


  public WebhookEvent source(WebhookSource source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nonnull
  public WebhookSource getSource() {
    return source;
  }


  public void setSource(WebhookSource source) {
    this.source = source;
  }


  public WebhookEvent verificationToken(String verificationToken) {
    
    this.verificationToken = verificationToken;
    return this;
  }

   /**
   * Aggregator verification data needed to verify the webhook
   * @return verificationToken
  **/
  @javax.annotation.Nullable
  public String getVerificationToken() {
    return verificationToken;
  }


  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }


  public WebhookEvent assetReportId(String assetReportId) {
    
    this.assetReportId = assetReportId;
    return this;
  }

   /**
   * Exists for assets.report_ready webhooks
   * @return assetReportId
  **/
  @javax.annotation.Nullable
  public String getAssetReportId() {
    return assetReportId;
  }


  public void setAssetReportId(String assetReportId) {
    this.assetReportId = assetReportId;
  }


  public WebhookEvent historicalTransactionsAvailable(Boolean historicalTransactionsAvailable) {
    
    this.historicalTransactionsAvailable = historicalTransactionsAvailable;
    return this;
  }

   /**
   * Exists for transactions.updates webhooks. Indicates if historical transaction information (up to 24 months) is ready to be queried.
   * @return historicalTransactionsAvailable
  **/
  @javax.annotation.Nullable
  public Boolean getHistoricalTransactionsAvailable() {
    return historicalTransactionsAvailable;
  }


  public void setHistoricalTransactionsAvailable(Boolean historicalTransactionsAvailable) {
    this.historicalTransactionsAvailable = historicalTransactionsAvailable;
  }


  public WebhookEvent removedTransactionIds(List<String> removedTransactionIds) {
    
    this.removedTransactionIds = removedTransactionIds;
    return this;
  }

  public WebhookEvent addRemovedTransactionIdsItem(String removedTransactionIdsItem) {
    if (this.removedTransactionIds == null) {
      this.removedTransactionIds = new ArrayList<>();
    }
    this.removedTransactionIds.add(removedTransactionIdsItem);
    return this;
  }

   /**
   * Exists for transactions.updates webhooks. Currently only supported by Plaid.
   * @return removedTransactionIds
  **/
  @javax.annotation.Nullable
  public List<String> getRemovedTransactionIds() {
    return removedTransactionIds;
  }


  public void setRemovedTransactionIds(List<String> removedTransactionIds) {
    this.removedTransactionIds = removedTransactionIds;
  }


  public WebhookEvent remoteData(Object remoteData) {
    
    this.remoteData = remoteData;
    return this;
  }

   /**
   * Get remoteData
   * @return remoteData
  **/
  @javax.annotation.Nullable
  public Object getRemoteData() {
    return remoteData;
  }


  public void setRemoteData(Object remoteData) {
    this.remoteData = remoteData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEvent webhookEvent = (WebhookEvent) o;
    return Objects.equals(this.type, webhookEvent.type) &&
        Objects.equals(this.financialConnectionId, webhookEvent.financialConnectionId) &&
        Objects.equals(this.environment, webhookEvent.environment) &&
        Objects.equals(this.source, webhookEvent.source) &&
        Objects.equals(this.verificationToken, webhookEvent.verificationToken) &&
        Objects.equals(this.assetReportId, webhookEvent.assetReportId) &&
        Objects.equals(this.historicalTransactionsAvailable, webhookEvent.historicalTransactionsAvailable) &&
        Objects.equals(this.removedTransactionIds, webhookEvent.removedTransactionIds) &&
        Objects.equals(this.remoteData, webhookEvent.remoteData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, financialConnectionId, environment, source, verificationToken, assetReportId, historicalTransactionsAvailable, removedTransactionIds, remoteData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEvent {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    financialConnectionId: ").append(toIndentedString(financialConnectionId)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("    assetReportId: ").append(toIndentedString(assetReportId)).append("\n");
    sb.append("    historicalTransactionsAvailable: ").append(toIndentedString(historicalTransactionsAvailable)).append("\n");
    sb.append("    removedTransactionIds: ").append(toIndentedString(removedTransactionIds)).append("\n");
    sb.append("    remoteData: ").append(toIndentedString(remoteData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("financial_connection_id");
    openapiFields.add("environment");
    openapiFields.add("source");
    openapiFields.add("verification_token");
    openapiFields.add("asset_report_id");
    openapiFields.add("historical_transactions_available");
    openapiFields.add("removed_transaction_ids");
    openapiFields.add("remote_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("financial_connection_id");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("remote_data");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WebhookEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEvent is not found in the empty JSON string", WebhookEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("financial_connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financial_connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financial_connection_id").toString()));
      }
      if (!jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if ((jsonObj.get("verification_token") != null && !jsonObj.get("verification_token").isJsonNull()) && !jsonObj.get("verification_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_token").toString()));
      }
      if ((jsonObj.get("asset_report_id") != null && !jsonObj.get("asset_report_id").isJsonNull()) && !jsonObj.get("asset_report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_report_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removed_transaction_ids") != null && !jsonObj.get("removed_transaction_ids").isJsonNull() && !jsonObj.get("removed_transaction_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removed_transaction_ids` to be an array in the JSON string but got `%s`", jsonObj.get("removed_transaction_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEvent>() {
           @Override
           public void write(JsonWriter out, WebhookEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookEvent
  * @throws IOException if the JSON string is invalid with respect to WebhookEvent
  */
  public static WebhookEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEvent.class);
  }

 /**
  * Convert an instance of WebhookEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

