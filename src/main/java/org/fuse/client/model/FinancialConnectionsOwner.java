/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fuse.client.model.FinancialConnectionsOwnerAddressesInner;
import org.fuse.client.model.FinancialConnectionsOwnerEmailsInner;
import org.fuse.client.model.FinancialConnectionsOwnerNamesInner;
import org.fuse.client.model.FinancialConnectionsOwnerPhoneNumbersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * FinancialConnectionsOwner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-23T12:03:45.546785Z[UTC]")
public class FinancialConnectionsOwner {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<FinancialConnectionsOwnerAddressesInner> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<FinancialConnectionsOwnerEmailsInner> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<FinancialConnectionsOwnerNamesInner> names = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phone_numbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<FinancialConnectionsOwnerPhoneNumbersInner> phoneNumbers = new ArrayList<>();

  public FinancialConnectionsOwner() {
  }

  public FinancialConnectionsOwner addresses(List<FinancialConnectionsOwnerAddressesInner> addresses) {
    this.addresses = addresses;
    return this;
  }

  public FinancialConnectionsOwner addAddressesItem(FinancialConnectionsOwnerAddressesInner addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Get addresses
   * @return addresses
  **/
  @javax.annotation.Nonnull
  public List<FinancialConnectionsOwnerAddressesInner> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<FinancialConnectionsOwnerAddressesInner> addresses) {
    this.addresses = addresses;
  }


  public FinancialConnectionsOwner emails(List<FinancialConnectionsOwnerEmailsInner> emails) {
    this.emails = emails;
    return this;
  }

  public FinancialConnectionsOwner addEmailsItem(FinancialConnectionsOwnerEmailsInner emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nonnull
  public List<FinancialConnectionsOwnerEmailsInner> getEmails() {
    return emails;
  }

  public void setEmails(List<FinancialConnectionsOwnerEmailsInner> emails) {
    this.emails = emails;
  }


  public FinancialConnectionsOwner names(List<FinancialConnectionsOwnerNamesInner> names) {
    this.names = names;
    return this;
  }

  public FinancialConnectionsOwner addNamesItem(FinancialConnectionsOwnerNamesInner namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

   /**
   * List of names associated with the owner
   * @return names
  **/
  @javax.annotation.Nonnull
  public List<FinancialConnectionsOwnerNamesInner> getNames() {
    return names;
  }

  public void setNames(List<FinancialConnectionsOwnerNamesInner> names) {
    this.names = names;
  }


  public FinancialConnectionsOwner phoneNumbers(List<FinancialConnectionsOwnerPhoneNumbersInner> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public FinancialConnectionsOwner addPhoneNumbersItem(FinancialConnectionsOwnerPhoneNumbersInner phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

   /**
   * Get phoneNumbers
   * @return phoneNumbers
  **/
  @javax.annotation.Nonnull
  public List<FinancialConnectionsOwnerPhoneNumbersInner> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<FinancialConnectionsOwnerPhoneNumbersInner> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialConnectionsOwner financialConnectionsOwner = (FinancialConnectionsOwner) o;
    return Objects.equals(this.addresses, financialConnectionsOwner.addresses) &&
        Objects.equals(this.emails, financialConnectionsOwner.emails) &&
        Objects.equals(this.names, financialConnectionsOwner.names) &&
        Objects.equals(this.phoneNumbers, financialConnectionsOwner.phoneNumbers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, emails, names, phoneNumbers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialConnectionsOwner {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("emails");
    openapiFields.add("names");
    openapiFields.add("phone_numbers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addresses");
    openapiRequiredFields.add("emails");
    openapiRequiredFields.add("names");
    openapiRequiredFields.add("phone_numbers");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FinancialConnectionsOwner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinancialConnectionsOwner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinancialConnectionsOwner is not found in the empty JSON string", FinancialConnectionsOwner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FinancialConnectionsOwner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinancialConnectionsOwner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FinancialConnectionsOwner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }

      JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
      // validate the required field `addresses` (array)
      for (int i = 0; i < jsonArrayaddresses.size(); i++) {
        FinancialConnectionsOwnerAddressesInner.validateJsonElement(jsonArrayaddresses.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }

      JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
      // validate the required field `emails` (array)
      for (int i = 0; i < jsonArrayemails.size(); i++) {
        FinancialConnectionsOwnerEmailsInner.validateJsonElement(jsonArrayemails.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
      }

      JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
      // validate the required field `names` (array)
      for (int i = 0; i < jsonArraynames.size(); i++) {
        FinancialConnectionsOwnerNamesInner.validateJsonElement(jsonArraynames.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("phone_numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("phone_numbers").toString()));
      }

      JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phone_numbers");
      // validate the required field `phone_numbers` (array)
      for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
        FinancialConnectionsOwnerPhoneNumbersInner.validateJsonElement(jsonArrayphoneNumbers.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinancialConnectionsOwner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinancialConnectionsOwner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinancialConnectionsOwner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinancialConnectionsOwner.class));

       return (TypeAdapter<T>) new TypeAdapter<FinancialConnectionsOwner>() {
           @Override
           public void write(JsonWriter out, FinancialConnectionsOwner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinancialConnectionsOwner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FinancialConnectionsOwner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FinancialConnectionsOwner
  * @throws IOException if the JSON string is invalid with respect to FinancialConnectionsOwner
  */
  public static FinancialConnectionsOwner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinancialConnectionsOwner.class);
  }

 /**
  * Convert an instance of FinancialConnectionsOwner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

