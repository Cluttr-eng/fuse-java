/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.fuse.client.model.FinancialConnectionsAccountDetailsAccountNumber;
import org.fuse.client.model.FinancialConnectionsAccountDetailsAch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.fuse.client.JSON;

/**
 * FinancialConnectionsAccountDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-12T14:48:18.188409Z[UTC]")
public class FinancialConnectionsAccountDetails {
  public static final String SERIALIZED_NAME_REMOTE_ID = "remote_id";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_ACH = "ach";
  @SerializedName(SERIALIZED_NAME_ACH)
  private FinancialConnectionsAccountDetailsAch ach;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private FinancialConnectionsAccountDetailsAccountNumber accountNumber;

  public static final String SERIALIZED_NAME_REMOTE_DATA = "remote_data";
  @SerializedName(SERIALIZED_NAME_REMOTE_DATA)
  private Object remoteData = null;

  public FinancialConnectionsAccountDetails() {
  }

  public FinancialConnectionsAccountDetails remoteId(String remoteId) {
    
    this.remoteId = remoteId;
    return this;
  }

   /**
   * Remote Id of the account, ie Plaid or Teller account id
   * @return remoteId
  **/
  @javax.annotation.Nonnull
  public String getRemoteId() {
    return remoteId;
  }


  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public FinancialConnectionsAccountDetails ach(FinancialConnectionsAccountDetailsAch ach) {
    
    this.ach = ach;
    return this;
  }

   /**
   * Get ach
   * @return ach
  **/
  @javax.annotation.Nullable
  public FinancialConnectionsAccountDetailsAch getAch() {
    return ach;
  }


  public void setAch(FinancialConnectionsAccountDetailsAch ach) {
    this.ach = ach;
  }


  public FinancialConnectionsAccountDetails accountNumber(FinancialConnectionsAccountDetailsAccountNumber accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  public FinancialConnectionsAccountDetailsAccountNumber getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(FinancialConnectionsAccountDetailsAccountNumber accountNumber) {
    this.accountNumber = accountNumber;
  }


  public FinancialConnectionsAccountDetails remoteData(Object remoteData) {
    
    this.remoteData = remoteData;
    return this;
  }

   /**
   * Get remoteData
   * @return remoteData
  **/
  @javax.annotation.Nullable
  public Object getRemoteData() {
    return remoteData;
  }


  public void setRemoteData(Object remoteData) {
    this.remoteData = remoteData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialConnectionsAccountDetails financialConnectionsAccountDetails = (FinancialConnectionsAccountDetails) o;
    return Objects.equals(this.remoteId, financialConnectionsAccountDetails.remoteId) &&
        Objects.equals(this.ach, financialConnectionsAccountDetails.ach) &&
        Objects.equals(this.accountNumber, financialConnectionsAccountDetails.accountNumber) &&
        Objects.equals(this.remoteData, financialConnectionsAccountDetails.remoteData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteId, ach, accountNumber, remoteData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialConnectionsAccountDetails {\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    ach: ").append(toIndentedString(ach)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    remoteData: ").append(toIndentedString(remoteData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("remote_id");
    openapiFields.add("ach");
    openapiFields.add("account_number");
    openapiFields.add("remote_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("remote_id");
    openapiRequiredFields.add("remote_data");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FinancialConnectionsAccountDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinancialConnectionsAccountDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinancialConnectionsAccountDetails is not found in the empty JSON string", FinancialConnectionsAccountDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FinancialConnectionsAccountDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinancialConnectionsAccountDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FinancialConnectionsAccountDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("remote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_id").toString()));
      }
      // validate the optional field `ach`
      if (jsonObj.get("ach") != null && !jsonObj.get("ach").isJsonNull()) {
        FinancialConnectionsAccountDetailsAch.validateJsonElement(jsonObj.get("ach"));
      }
      // validate the optional field `account_number`
      if (jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) {
        FinancialConnectionsAccountDetailsAccountNumber.validateJsonElement(jsonObj.get("account_number"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinancialConnectionsAccountDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinancialConnectionsAccountDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinancialConnectionsAccountDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinancialConnectionsAccountDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FinancialConnectionsAccountDetails>() {
           @Override
           public void write(JsonWriter out, FinancialConnectionsAccountDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinancialConnectionsAccountDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FinancialConnectionsAccountDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FinancialConnectionsAccountDetails
  * @throws IOException if the JSON string is invalid with respect to FinancialConnectionsAccountDetails
  */
  public static FinancialConnectionsAccountDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinancialConnectionsAccountDetails.class);
  }

 /**
  * Convert an instance of FinancialConnectionsAccountDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

