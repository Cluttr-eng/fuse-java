/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fuse.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Type of the transaction, ie loan
 */
@JsonAdapter(TransactionEventType.Adapter.class)
public enum TransactionEventType {
  
  ACH("ach"),
  
  ADJUSTMENT("adjustment"),
  
  ATM("atm"),
  
  BANK_CHARGE("bank_charge"),
  
  BILL_PAYMENT("bill_payment"),
  
  CARD_PAYMENT("card_payment"),
  
  CASH("cash"),
  
  CASHBACK("cashback"),
  
  CHARGE("charge"),
  
  CHEQUE("cheque"),
  
  CREDIT("credit"),
  
  DEBIT("debit"),
  
  DEPOSIT("deposit"),
  
  DIGITAL_PAYMENT("digital_payment"),
  
  DIRECT_DEBIT("direct_debit"),
  
  FEE("fee"),
  
  IN_STORE("in_store"),
  
  INTEREST("interest"),
  
  ONLINE("online"),
  
  OTHER("other"),
  
  PAYMENT("payment"),
  
  PURCHASE("purchase"),
  
  STANDING_ORDER("standing_order"),
  
  TRANSACTION("transaction"),
  
  TRANSFER("transfer"),
  
  WIRE("wire"),
  
  WITHDRAWAL("withdrawal");

  private String value;

  TransactionEventType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransactionEventType fromValue(String value) {
    for (TransactionEventType b : TransactionEventType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransactionEventType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransactionEventType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransactionEventType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransactionEventType.fromValue(value);
    }
  }
}

