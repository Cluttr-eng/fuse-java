/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MigrateFinancialConnectionsAggregatorConnectionData;
import org.openapitools.client.model.MigrateFinancialConnectionsTokenRequestEntity;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MigrateFinancialConnectionsTokenRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-10T13:25:52.697721Z[UTC]")
public class MigrateFinancialConnectionsTokenRequest {
  public static final String SERIALIZED_NAME_CONNECTION_DATA = "connection_data";
  @SerializedName(SERIALIZED_NAME_CONNECTION_DATA)
  private MigrateFinancialConnectionsAggregatorConnectionData connectionData;

  /**
   * The aggregator being migrated (either &#39;plaid&#39;, &#39;mx&#39; or &#39;teller).
   */
  @JsonAdapter(AggregatorEnum.Adapter.class)
  public enum AggregatorEnum {
    PLAID("plaid"),
    
    MX("mx"),
    
    TELLER("teller");

    private String value;

    AggregatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregatorEnum fromValue(String value) {
      for (AggregatorEnum b : AggregatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATOR = "aggregator";
  @SerializedName(SERIALIZED_NAME_AGGREGATOR)
  private AggregatorEnum aggregator;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private MigrateFinancialConnectionsTokenRequestEntity entity;

  public static final String SERIALIZED_NAME_FUSE_PRODUCTS = "fuse_products";
  @SerializedName(SERIALIZED_NAME_FUSE_PRODUCTS)
  private List<Product> fuseProducts = new ArrayList<>();

  public MigrateFinancialConnectionsTokenRequest() {
  }

  public MigrateFinancialConnectionsTokenRequest connectionData(MigrateFinancialConnectionsAggregatorConnectionData connectionData) {
    
    this.connectionData = connectionData;
    return this;
  }

   /**
   * Get connectionData
   * @return connectionData
  **/
  @javax.annotation.Nonnull
  public MigrateFinancialConnectionsAggregatorConnectionData getConnectionData() {
    return connectionData;
  }


  public void setConnectionData(MigrateFinancialConnectionsAggregatorConnectionData connectionData) {
    this.connectionData = connectionData;
  }


  public MigrateFinancialConnectionsTokenRequest aggregator(AggregatorEnum aggregator) {
    
    this.aggregator = aggregator;
    return this;
  }

   /**
   * The aggregator being migrated (either &#39;plaid&#39;, &#39;mx&#39; or &#39;teller).
   * @return aggregator
  **/
  @javax.annotation.Nonnull
  public AggregatorEnum getAggregator() {
    return aggregator;
  }


  public void setAggregator(AggregatorEnum aggregator) {
    this.aggregator = aggregator;
  }


  public MigrateFinancialConnectionsTokenRequest entity(MigrateFinancialConnectionsTokenRequestEntity entity) {
    
    this.entity = entity;
    return this;
  }

   /**
   * Get entity
   * @return entity
  **/
  @javax.annotation.Nonnull
  public MigrateFinancialConnectionsTokenRequestEntity getEntity() {
    return entity;
  }


  public void setEntity(MigrateFinancialConnectionsTokenRequestEntity entity) {
    this.entity = entity;
  }


  public MigrateFinancialConnectionsTokenRequest fuseProducts(List<Product> fuseProducts) {
    
    this.fuseProducts = fuseProducts;
    return this;
  }

  public MigrateFinancialConnectionsTokenRequest addFuseProductsItem(Product fuseProductsItem) {
    if (this.fuseProducts == null) {
      this.fuseProducts = new ArrayList<>();
    }
    this.fuseProducts.add(fuseProductsItem);
    return this;
  }

   /**
   * A list of Fuse products that the migrated connection will have access to.
   * @return fuseProducts
  **/
  @javax.annotation.Nonnull
  public List<Product> getFuseProducts() {
    return fuseProducts;
  }


  public void setFuseProducts(List<Product> fuseProducts) {
    this.fuseProducts = fuseProducts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrateFinancialConnectionsTokenRequest migrateFinancialConnectionsTokenRequest = (MigrateFinancialConnectionsTokenRequest) o;
    return Objects.equals(this.connectionData, migrateFinancialConnectionsTokenRequest.connectionData) &&
        Objects.equals(this.aggregator, migrateFinancialConnectionsTokenRequest.aggregator) &&
        Objects.equals(this.entity, migrateFinancialConnectionsTokenRequest.entity) &&
        Objects.equals(this.fuseProducts, migrateFinancialConnectionsTokenRequest.fuseProducts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionData, aggregator, entity, fuseProducts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrateFinancialConnectionsTokenRequest {\n");
    sb.append("    connectionData: ").append(toIndentedString(connectionData)).append("\n");
    sb.append("    aggregator: ").append(toIndentedString(aggregator)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    fuseProducts: ").append(toIndentedString(fuseProducts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection_data");
    openapiFields.add("aggregator");
    openapiFields.add("entity");
    openapiFields.add("fuse_products");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connection_data");
    openapiRequiredFields.add("aggregator");
    openapiRequiredFields.add("entity");
    openapiRequiredFields.add("fuse_products");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MigrateFinancialConnectionsTokenRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrateFinancialConnectionsTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrateFinancialConnectionsTokenRequest is not found in the empty JSON string", MigrateFinancialConnectionsTokenRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MigrateFinancialConnectionsTokenRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrateFinancialConnectionsTokenRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MigrateFinancialConnectionsTokenRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `connection_data`
      MigrateFinancialConnectionsAggregatorConnectionData.validateJsonElement(jsonObj.get("connection_data"));
      if (!jsonObj.get("aggregator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregator").toString()));
      }
      // validate the required field `entity`
      MigrateFinancialConnectionsTokenRequestEntity.validateJsonElement(jsonObj.get("entity"));
      // ensure the required json array is present
      if (jsonObj.get("fuse_products") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("fuse_products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuse_products` to be an array in the JSON string but got `%s`", jsonObj.get("fuse_products").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrateFinancialConnectionsTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrateFinancialConnectionsTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrateFinancialConnectionsTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrateFinancialConnectionsTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrateFinancialConnectionsTokenRequest>() {
           @Override
           public void write(JsonWriter out, MigrateFinancialConnectionsTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrateFinancialConnectionsTokenRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MigrateFinancialConnectionsTokenRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MigrateFinancialConnectionsTokenRequest
  * @throws IOException if the JSON string is invalid with respect to MigrateFinancialConnectionsTokenRequest
  */
  public static MigrateFinancialConnectionsTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrateFinancialConnectionsTokenRequest.class);
  }

 /**
  * Convert an instance of MigrateFinancialConnectionsTokenRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

