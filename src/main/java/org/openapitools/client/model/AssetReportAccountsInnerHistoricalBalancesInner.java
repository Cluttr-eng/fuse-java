/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetReportAccountsInnerHistoricalBalancesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-10T13:19:07.464573Z[UTC]")
public class AssetReportAccountsInnerHistoricalBalancesInner {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private BigDecimal current;

  public static final String SERIALIZED_NAME_ISO_CURRENCY_CODE = "iso_currency_code";
  @SerializedName(SERIALIZED_NAME_ISO_CURRENCY_CODE)
  private String isoCurrencyCode;

  public AssetReportAccountsInnerHistoricalBalancesInner() {
  }

  public AssetReportAccountsInnerHistoricalBalancesInner date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date of the calculated historical balance, in an ISO 8601 format (YYYY-MM-DD)
   * @return date
  **/
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public AssetReportAccountsInnerHistoricalBalancesInner current(BigDecimal current) {
    
    this.current = current;
    return this;
  }

   /**
   * The total amount of funds in the account, calculated from the current balance in the balance object by subtracting inflows and adding back outflows according to the posted date of each transaction.
   * @return current
  **/
  @javax.annotation.Nullable
  public BigDecimal getCurrent() {
    return current;
  }


  public void setCurrent(BigDecimal current) {
    this.current = current;
  }


  public AssetReportAccountsInnerHistoricalBalancesInner isoCurrencyCode(String isoCurrencyCode) {
    
    this.isoCurrencyCode = isoCurrencyCode;
    return this;
  }

   /**
   * The ISO-4217 currency code of the balance.
   * @return isoCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getIsoCurrencyCode() {
    return isoCurrencyCode;
  }


  public void setIsoCurrencyCode(String isoCurrencyCode) {
    this.isoCurrencyCode = isoCurrencyCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetReportAccountsInnerHistoricalBalancesInner assetReportAccountsInnerHistoricalBalancesInner = (AssetReportAccountsInnerHistoricalBalancesInner) o;
    return Objects.equals(this.date, assetReportAccountsInnerHistoricalBalancesInner.date) &&
        Objects.equals(this.current, assetReportAccountsInnerHistoricalBalancesInner.current) &&
        Objects.equals(this.isoCurrencyCode, assetReportAccountsInnerHistoricalBalancesInner.isoCurrencyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, current, isoCurrencyCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetReportAccountsInnerHistoricalBalancesInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    isoCurrencyCode: ").append(toIndentedString(isoCurrencyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("current");
    openapiFields.add("iso_currency_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AssetReportAccountsInnerHistoricalBalancesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetReportAccountsInnerHistoricalBalancesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetReportAccountsInnerHistoricalBalancesInner is not found in the empty JSON string", AssetReportAccountsInnerHistoricalBalancesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AssetReportAccountsInnerHistoricalBalancesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetReportAccountsInnerHistoricalBalancesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("iso_currency_code") != null && !jsonObj.get("iso_currency_code").isJsonNull()) && !jsonObj.get("iso_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_currency_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetReportAccountsInnerHistoricalBalancesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetReportAccountsInnerHistoricalBalancesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetReportAccountsInnerHistoricalBalancesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetReportAccountsInnerHistoricalBalancesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetReportAccountsInnerHistoricalBalancesInner>() {
           @Override
           public void write(JsonWriter out, AssetReportAccountsInnerHistoricalBalancesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetReportAccountsInnerHistoricalBalancesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssetReportAccountsInnerHistoricalBalancesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssetReportAccountsInnerHistoricalBalancesInner
  * @throws IOException if the JSON string is invalid with respect to AssetReportAccountsInnerHistoricalBalancesInner
  */
  public static AssetReportAccountsInnerHistoricalBalancesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetReportAccountsInnerHistoricalBalancesInner.class);
  }

 /**
  * Convert an instance of AssetReportAccountsInnerHistoricalBalancesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

