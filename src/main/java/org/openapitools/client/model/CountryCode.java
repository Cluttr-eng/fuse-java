/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets CountryCode
 */
@JsonAdapter(CountryCode.Adapter.class)
public enum CountryCode {
  
  AE("AE"),
  
  AM("AM"),
  
  AR("AR"),
  
  AT("AT"),
  
  AU("AU"),
  
  BD("BD"),
  
  BE("BE"),
  
  BH("BH"),
  
  BM("BM"),
  
  BN("BN"),
  
  BR("BR"),
  
  BW("BW"),
  
  CA("CA"),
  
  CH("CH"),
  
  CI("CI"),
  
  CL("CL"),
  
  CM("CM"),
  
  CN("CN"),
  
  CO("CO"),
  
  CZ("CZ"),
  
  DE("DE"),
  
  DZ("DZ"),
  
  EG("EG"),
  
  ES("ES"),
  
  FI("FI"),
  
  FK("FK"),
  
  FR("FR"),
  
  GB("GB"),
  
  GG("GG"),
  
  GH("GH"),
  
  GM("GM"),
  
  GR("GR"),
  
  HK("HK"),
  
  ID("ID"),
  
  IE("IE"),
  
  IL("IL"),
  
  IM("IM"),
  
  IN("IN"),
  
  IT("IT"),
  
  JE("JE"),
  
  JO("JO"),
  
  JP("JP"),
  
  KE("KE"),
  
  KH("KH"),
  
  KR("KR"),
  
  KW("KW"),
  
  LA("LA"),
  
  LB("LB"),
  
  LK("LK"),
  
  LT("LT"),
  
  LU("LU"),
  
  MC("MC"),
  
  MO("MO"),
  
  MT("MT"),
  
  MU("MU"),
  
  MV("MV"),
  
  MX("MX"),
  
  MY("MY"),
  
  NG("NG"),
  
  NL("NL"),
  
  NP("NP"),
  
  NZ("NZ"),
  
  OM("OM"),
  
  PE("PE"),
  
  PH("PH"),
  
  PK("PK"),
  
  PL("PL"),
  
  PT("PT"),
  
  QA("QA"),
  
  RU("RU"),
  
  SA("SA"),
  
  SE("SE"),
  
  SG("SG"),
  
  SL("SL"),
  
  TH("TH"),
  
  TR("TR"),
  
  TW("TW"),
  
  TZ("TZ"),
  
  UG("UG"),
  
  US("US"),
  
  UY("UY"),
  
  VN("VN"),
  
  ZA("ZA"),
  
  ZM("ZM"),
  
  ZW("ZW");

  private String value;

  CountryCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CountryCode fromValue(String value) {
    for (CountryCode b : CountryCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CountryCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final CountryCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CountryCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CountryCode.fromValue(value);
    }
  }
}

