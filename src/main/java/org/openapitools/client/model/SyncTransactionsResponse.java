/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SyncTransactionsResponseRemovedInner;
import org.openapitools.client.model.Transaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SyncTransactionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-10T13:19:07.464573Z[UTC]")
public class SyncTransactionsResponse {
  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private List<Transaction> added;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private List<Transaction> modified;

  public static final String SERIALIZED_NAME_REMOVED = "removed";
  @SerializedName(SERIALIZED_NAME_REMOVED)
  private List<SyncTransactionsResponseRemovedInner> removed;

  public static final String SERIALIZED_NAME_NEXT_CURSOR = "next_cursor";
  @SerializedName(SERIALIZED_NAME_NEXT_CURSOR)
  private String nextCursor;

  public static final String SERIALIZED_NAME_HAS_NEXT = "has_next";
  @SerializedName(SERIALIZED_NAME_HAS_NEXT)
  private Boolean hasNext;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public SyncTransactionsResponse() {
  }

  public SyncTransactionsResponse added(List<Transaction> added) {
    
    this.added = added;
    return this;
  }

  public SyncTransactionsResponse addAddedItem(Transaction addedItem) {
    if (this.added == null) {
      this.added = new ArrayList<>();
    }
    this.added.add(addedItem);
    return this;
  }

   /**
   * Transactions that have been added to the item since &#x60;cursor&#x60; ordered by ascending last modified time.
   * @return added
  **/
  @javax.annotation.Nullable
  public List<Transaction> getAdded() {
    return added;
  }


  public void setAdded(List<Transaction> added) {
    this.added = added;
  }


  public SyncTransactionsResponse modified(List<Transaction> modified) {
    
    this.modified = modified;
    return this;
  }

  public SyncTransactionsResponse addModifiedItem(Transaction modifiedItem) {
    if (this.modified == null) {
      this.modified = new ArrayList<>();
    }
    this.modified.add(modifiedItem);
    return this;
  }

   /**
   * Transactions that have been modified on the item since &#x60;cursor&#x60; ordered by ascending last modified time.
   * @return modified
  **/
  @javax.annotation.Nullable
  public List<Transaction> getModified() {
    return modified;
  }


  public void setModified(List<Transaction> modified) {
    this.modified = modified;
  }


  public SyncTransactionsResponse removed(List<SyncTransactionsResponseRemovedInner> removed) {
    
    this.removed = removed;
    return this;
  }

  public SyncTransactionsResponse addRemovedItem(SyncTransactionsResponseRemovedInner removedItem) {
    if (this.removed == null) {
      this.removed = new ArrayList<>();
    }
    this.removed.add(removedItem);
    return this;
  }

   /**
   * Transactions that have been removed from the item since &#x60;cursor&#x60; ordered by ascending last modified time.
   * @return removed
  **/
  @javax.annotation.Nullable
  public List<SyncTransactionsResponseRemovedInner> getRemoved() {
    return removed;
  }


  public void setRemoved(List<SyncTransactionsResponseRemovedInner> removed) {
    this.removed = removed;
  }


  public SyncTransactionsResponse nextCursor(String nextCursor) {
    
    this.nextCursor = nextCursor;
    return this;
  }

   /**
   * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by &#x60;has_next&#x60; being &#x60;false&#x60;) will be valid for at least 1 year. This cursor should be persisted for later calls.
   * @return nextCursor
  **/
  @javax.annotation.Nullable
  public String getNextCursor() {
    return nextCursor;
  }


  public void setNextCursor(String nextCursor) {
    this.nextCursor = nextCursor;
  }


  public SyncTransactionsResponse hasNext(Boolean hasNext) {
    
    this.hasNext = hasNext;
    return this;
  }

   /**
   * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with &#x60;cursor&#x60; set to &#x60;next_cursor&#x60;. If &#x60;has_next&#x60; is true, it&#39;s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
   * @return hasNext
  **/
  @javax.annotation.Nullable
  public Boolean getHasNext() {
    return hasNext;
  }


  public void setHasNext(Boolean hasNext) {
    this.hasNext = hasNext;
  }


  public SyncTransactionsResponse requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * An identifier that is exclusive to the request and can serve as a means for investigating and resolving issues.
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncTransactionsResponse syncTransactionsResponse = (SyncTransactionsResponse) o;
    return Objects.equals(this.added, syncTransactionsResponse.added) &&
        Objects.equals(this.modified, syncTransactionsResponse.modified) &&
        Objects.equals(this.removed, syncTransactionsResponse.removed) &&
        Objects.equals(this.nextCursor, syncTransactionsResponse.nextCursor) &&
        Objects.equals(this.hasNext, syncTransactionsResponse.hasNext) &&
        Objects.equals(this.requestId, syncTransactionsResponse.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(added, modified, removed, nextCursor, hasNext, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncTransactionsResponse {\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    removed: ").append(toIndentedString(removed)).append("\n");
    sb.append("    nextCursor: ").append(toIndentedString(nextCursor)).append("\n");
    sb.append("    hasNext: ").append(toIndentedString(hasNext)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added");
    openapiFields.add("modified");
    openapiFields.add("removed");
    openapiFields.add("next_cursor");
    openapiFields.add("has_next");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SyncTransactionsResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncTransactionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncTransactionsResponse is not found in the empty JSON string", SyncTransactionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SyncTransactionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncTransactionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("added") != null && !jsonObj.get("added").isJsonNull()) {
        JsonArray jsonArrayadded = jsonObj.getAsJsonArray("added");
        if (jsonArrayadded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("added").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `added` to be an array in the JSON string but got `%s`", jsonObj.get("added").toString()));
          }

          // validate the optional field `added` (array)
          for (int i = 0; i < jsonArrayadded.size(); i++) {
            Transaction.validateJsonElement(jsonArrayadded.get(i));
          };
        }
      }
      if (jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) {
        JsonArray jsonArraymodified = jsonObj.getAsJsonArray("modified");
        if (jsonArraymodified != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modified").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modified` to be an array in the JSON string but got `%s`", jsonObj.get("modified").toString()));
          }

          // validate the optional field `modified` (array)
          for (int i = 0; i < jsonArraymodified.size(); i++) {
            Transaction.validateJsonElement(jsonArraymodified.get(i));
          };
        }
      }
      if (jsonObj.get("removed") != null && !jsonObj.get("removed").isJsonNull()) {
        JsonArray jsonArrayremoved = jsonObj.getAsJsonArray("removed");
        if (jsonArrayremoved != null) {
          // ensure the json data is an array
          if (!jsonObj.get("removed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `removed` to be an array in the JSON string but got `%s`", jsonObj.get("removed").toString()));
          }

          // validate the optional field `removed` (array)
          for (int i = 0; i < jsonArrayremoved.size(); i++) {
            SyncTransactionsResponseRemovedInner.validateJsonElement(jsonArrayremoved.get(i));
          };
        }
      }
      if ((jsonObj.get("next_cursor") != null && !jsonObj.get("next_cursor").isJsonNull()) && !jsonObj.get("next_cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_cursor").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncTransactionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncTransactionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncTransactionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncTransactionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncTransactionsResponse>() {
           @Override
           public void write(JsonWriter out, SyncTransactionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncTransactionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SyncTransactionsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SyncTransactionsResponse
  * @throws IOException if the JSON string is invalid with respect to SyncTransactionsResponse
  */
  public static SyncTransactionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncTransactionsResponse.class);
  }

 /**
  * Convert an instance of SyncTransactionsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

