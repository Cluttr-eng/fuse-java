/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransactionMerchant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetReportTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-10T13:25:52.697721Z[UTC]")
public class AssetReportTransaction {
  public static final String SERIALIZED_NAME_REMOTE_ID = "remote_id";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_REMOTE_ACCOUNT_ID = "remote_account_id";
  @SerializedName(SERIALIZED_NAME_REMOTE_ACCOUNT_ID)
  private String remoteAccountId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    ACCESSORIES_STORE("accessories_store"),
    
    ACCOUNTING_AND_BOOKKEEPING("accounting_and_bookkeeping"),
    
    ACH("ach"),
    
    ACORNS("acorns"),
    
    ACUPUNCTURE("acupuncture"),
    
    ADULT("adult"),
    
    ADULT_EDUCATION("adult_education"),
    
    ADULT_ENTERTAINMENT("adult_entertainment"),
    
    ADVERTISING("advertising"),
    
    ADVERTISING_AGENCIES_AND_MEDIA_BUYERS("advertising_agencies_and_media_buyers"),
    
    ADVERTISING_AND_MARKETING("advertising_and_marketing"),
    
    AFGHAN("afghan"),
    
    AFRICAN("african"),
    
    AGRICULTURE_AND_FORESTRY("agriculture_and_forestry"),
    
    AIRLINES_AND_AVIATION_SERVICES("airlines_and_aviation_services"),
    
    AIRPORTS("airports"),
    
    ALCOHOL_AND_BARS("alcohol_and_bars"),
    
    ALTERNATIVE_MEDICINE("alternative_medicine"),
    
    AMERICAN("american"),
    
    ANESTHESIOLOGISTS("anesthesiologists"),
    
    ANIMAL_SHELTER("animal_shelter"),
    
    ANTIQUES("antiques"),
    
    APARTMENTS_CONDOS_AND_HOUSES("apartments_condos_and_houses"),
    
    APPAREL_AND_FABRIC_PRODUCTS("apparel_and_fabric_products"),
    
    AQUARIUM("aquarium"),
    
    ARCADES_AND_AMUSEMENT_PARKS("arcades_and_amusement_parks"),
    
    ARCHITECTS("architects"),
    
    ART_AND_GRAPHIC_DESIGN("art_and_graphic_design"),
    
    ART_DEALERS_AND_GALLERIES("art_dealers_and_galleries"),
    
    ART_RESTORATION("art_restoration"),
    
    ART_SCHOOL("art_school"),
    
    ARTS_AND_CRAFTS("arts_and_crafts"),
    
    ARTS_AND_ENTERTAINMENT("arts_and_entertainment"),
    
    ASIAN("asian"),
    
    ASSISTED_LIVING_SERVICES("assisted_living_services"),
    
    ATHLETIC_FIELDS("athletic_fields"),
    
    ATM("atm"),
    
    ATMS("atms"),
    
    AUCTIONS("auctions"),
    
    AUDIOVISUAL("audiovisual"),
    
    AUSTRALIAN("australian"),
    
    AUTO_OIL_AND_LUBE("auto_oil_and_lube"),
    
    AUTO_PAYMENT("auto_payment"),
    
    AUTO_SMOG_CHECK("auto_smog_check"),
    
    AUTO_TIRES("auto_tires"),
    
    AUTO_TRANSMISSION("auto_transmission"),
    
    AUTOMATION_AND_CONTROL_SYSTEMS("automation_and_control_systems"),
    
    AUTOMOTIVE("automotive"),
    
    BAGEL_SHOP("bagel_shop"),
    
    BAKERY("bakery"),
    
    BANK_FEES("bank_fees"),
    
    BANKING_AND_FINANCE("banking_and_finance"),
    
    BAR("bar"),
    
    BARBECUE("barbecue"),
    
    BASEBALL("baseball"),
    
    BASKETBALL("basketball"),
    
    BATTING_CAGES("batting_cages"),
    
    BEACHES("beaches"),
    
    BEAUTY_PRODUCTS("beauty_products"),
    
    BED_AND_BREAKFASTS("bed_and_breakfasts"),
    
    BEER_WINE_AND_SPIRITS("beer_wine_and_spirits"),
    
    BENEFITS("benefits"),
    
    BETTERMENT("betterment"),
    
    BICYCLES("bicycles"),
    
    BILL("bill"),
    
    BILLIARDS_AND_POOL("billiards_and_pool"),
    
    BILLPAY("billpay"),
    
    BLOOD_BANKS_AND_CENTERS("blood_banks_and_centers"),
    
    BOARDING_HOUSES("boarding_houses"),
    
    BOAT("boat"),
    
    BOAT_DEALERS("boat_dealers"),
    
    BOATING("boating"),
    
    BOOKS_AND_SUPPLIES("books_and_supplies"),
    
    BOOKSTORES("bookstores"),
    
    BOUTIQUE("boutique"),
    
    BOWLING("bowling"),
    
    BRAZILIAN("brazilian"),
    
    BREAKFAST_SPOT("breakfast_spot"),
    
    BREWERIES("breweries"),
    
    BUILDING_AND_LAND_SURVEYORS("building_and_land_surveyors"),
    
    BUILDINGS_AND_STRUCTURES("buildings_and_structures"),
    
    BURGERS("burgers"),
    
    BURRITO("burrito"),
    
    BUS_STATIONS("bus_stations"),
    
    BUSINESS("business"),
    
    BUSINESS_AND_STRATEGY_CONSULTING("business_and_strategy_consulting"),
    
    BUSINESS_BROKERS_AND_FRANCHISES("business_brokers_and_franchises"),
    
    BUSINESS_SERVICES("business_services"),
    
    CABLE("cable"),
    
    CAFE("cafe"),
    
    CAJUN("cajun"),
    
    CAMERAS("cameras"),
    
    CAMPGROUNDS_AND_RV_PARKS("campgrounds_and_rv_parks"),
    
    CANOES_AND_KAYAKS("canoes_and_kayaks"),
    
    CAR_AND_TRUCK_RENTALS("car_and_truck_rentals"),
    
    CAR_APPRAISERS("car_appraisers"),
    
    CAR_DEALERS_AND_LEASING("car_dealers_and_leasing"),
    
    CAR_PARTS_AND_ACCESSORIES("car_parts_and_accessories"),
    
    CAR_SERVICE("car_service"),
    
    CAR_WASH_AND_DETAIL("car_wash_and_detail"),
    
    CARDIOLOGISTS("cardiologists"),
    
    CARDS_AND_STATIONERY("cards_and_stationery"),
    
    CARETAKERS("caretakers"),
    
    CARIBBEAN("caribbean"),
    
    CARPENTERS("carpenters"),
    
    CARPET_AND_FLOORING("carpet_and_flooring"),
    
    CASH_ADVANCE("cash_advance"),
    
    CASINOS_AND_GAMING("casinos_and_gaming"),
    
    CATERING("catering"),
    
    CEMETERY("cemetery"),
    
    CHARITIES_AND_NON_PROFITS("charities_and_non-profits"),
    
    CHARITY("charity"),
    
    CHARTER_BUSES("charter_buses"),
    
    CHASE_QUICKPAY("chase_quickpay"),
    
    CHECK("check"),
    
    CHECK_CASHING("check_cashing"),
    
    CHEMICALS_AND_GASSES("chemicals_and_gasses"),
    
    CHILDCARE("childcare"),
    
    CHILDREN("children"),
    
    CHINESE("chinese"),
    
    CHIROPRACTORS("chiropractors"),
    
    CHURCHES("churches"),
    
    CIRCUSES_AND_CARNIVALS("circuses_and_carnivals"),
    
    CLASSIC_AND_ANTIQUE_CAR("classic_and_antique_car"),
    
    CLEANING("cleaning"),
    
    CLOTHING("clothing"),
    
    CLOTHING_AND_ACCESSORIES("clothing_and_accessories"),
    
    COAL("coal"),
    
    COFFEE_SHOP("coffee_shop"),
    
    COINBASE("coinbase"),
    
    COLLECTIONS("collections"),
    
    COLLEGES_AND_UNIVERSITIES("colleges_and_universities"),
    
    COMBAT_SPORTS("combat_sports"),
    
    COMMERCIAL_REAL_ESTATE("commercial_real_estate"),
    
    COMMUNITY("community"),
    
    COMPUTER_TRAINING("computer_training"),
    
    COMPUTERS("computers"),
    
    COMPUTERS_AND_ELECTRONICS("computers_and_electronics"),
    
    COMPUTERS_AND_OFFICE_MACHINES("computers_and_office_machines"),
    
    CONSTRUCTION("construction"),
    
    CONSTRUCTION_SUPPLIES("construction_supplies"),
    
    CONTRACTORS("contractors"),
    
    CONVENIENCE_STORES("convenience_stores"),
    
    CORPORATE_HOUSING("corporate_housing"),
    
    CORRECTIONAL_INSTITUTIONS("correctional_institutions"),
    
    COSTUMES("costumes"),
    
    COTTAGES_AND_CABINS("cottages_and_cabins"),
    
    COUNSELING_AND_THERAPY("counseling_and_therapy"),
    
    COURTS("courts"),
    
    CREATIVE_SERVICES("creative_services"),
    
    CREDIT("credit"),
    
    CREDIT_CARD("credit_card"),
    
    CREDIT_COUNSELING_AND_BANKRUPTCY_SERVICES("credit_counseling_and_bankruptcy_services"),
    
    CREDIT_REPORTING("credit_reporting"),
    
    CROP_PRODUCTION("crop_production"),
    
    CRUISES("cruises"),
    
    CUBAN("cuban"),
    
    CULINARY_LESSONS_AND_SCHOOLS("culinary_lessons_and_schools"),
    
    CUPCAKE_SHOP("cupcake_shop"),
    
    CYCLING("cycling"),
    
    DANCE("dance"),
    
    DANCE_AND_MUSIC("dance_and_music"),
    
    DANCE_HALLS_AND_SALOONS("dance_halls_and_saloons"),
    
    DANCE_SCHOOLS("dance_schools"),
    
    DATING_AND_ESCORT("dating_and_escort"),
    
    DAY_CARE_AND_PRESCHOOLS("day_care_and_preschools"),
    
    DEBIT("debit"),
    
    DELIS("delis"),
    
    DENTISTS("dentists"),
    
    DEPARTMENT_STORES("department_stores"),
    
    DEPOSIT("deposit"),
    
    DERMATOLOGISTS("dermatologists"),
    
    DESSERT("dessert"),
    
    DIGIT("digit"),
    
    DIGITAL_PURCHASE("digital_purchase"),
    
    DINERS("diners"),
    
    DINING("dining"),
    
    DIRECT_MAIL_AND_EMAIL_MARKETING_SERVICES("direct_mail_and_email_marketing_services"),
    
    DISABLED_PERSONS_SERVICES("disabled_persons_services"),
    
    DISCOUNT_STORES("discount_stores"),
    
    DISTILLERY("distillery"),
    
    DISTRIBUTION("distribution"),
    
    DOCTORS_AND_DENTISTS("doctors_and_dentists"),
    
    DONUTS("donuts"),
    
    DOORS_AND_WINDOWS("doors_and_windows"),
    
    DRIVING_SCHOOLS("driving_schools"),
    
    DRUG_AND_ALCOHOL_SERVICES("drug_and_alcohol_services"),
    
    DWOLLA("dwolla"),
    
    EAR_NOSE_AND_THROAT("ear_nose_and_throat"),
    
    EASTERN_EUROPEAN("eastern_european"),
    
    EDUCATION("education"),
    
    ELECTRIC("electric"),
    
    ELECTRICAL_EQUIPMENT("electrical_equipment"),
    
    ELECTRICAL_EQUIPMENT_AND_COMPONENTS("electrical_equipment_and_components"),
    
    ELECTRICIANS("electricians"),
    
    ELECTRONICS("electronics"),
    
    EMERGENCY_SERVICES("emergency_services"),
    
    EMPLOYMENT_AGENCIES("employment_agencies"),
    
    ENGINEERING("engineering"),
    
    ENTERTAINMENT("entertainment"),
    
    ENVIRONMENTAL("environmental"),
    
    EQUESTRIAN("equestrian"),
    
    EQUIPMENT_RENTAL("equipment_rental"),
    
    ETHIOPIAN("ethiopian"),
    
    EVENTS_AND_EVENT_PLANNING("events_and_event_planning"),
    
    EXCESS_ACTIVITY("excess_activity"),
    
    EXPENSE("expense"),
    
    FACILITIES_AND_NURSING_HOMES("facilities_and_nursing_homes"),
    
    FAIRGROUNDS_AND_RODEOS("fairgrounds_and_rodeos"),
    
    FALAFEL("falafel"),
    
    FAMILY_MEDICINE("family_medicine"),
    
    FARMERS_MARKETS("farmers_markets"),
    
    FAST_FOOD("fast_food"),
    
    FEE("fee"),
    
    FENCES_FIREPLACES_AND_GARAGE_DOORS("fences_fireplaces_and_garage_doors"),
    
    FILIPINO("filipino"),
    
    FINANCIAL("financial"),
    
    FINANCIAL_PLANNING_AND_INVESTMENTS("financial_planning_and_investments"),
    
    FIRE_STATIONS("fire_stations"),
    
    FISH_AND_CHIPS("fish_and_chips"),
    
    FLEA_MARKETS("flea_markets"),
    
    FLORISTS("florists"),
    
    FOOD_AND_BEVERAGE("food_and_beverage"),
    
    FOOD_AND_BEVERAGE_STORE("food_and_beverage_store"),
    
    FOOD_AND_DRINK("food_and_drink"),
    
    FOOD_TRUCK("food_truck"),
    
    FOOTBALL("football"),
    
    FOREIGN_TRANSACTION("foreign_transaction"),
    
    FORESTRY("forestry"),
    
    FORESTS("forests"),
    
    FRATERNITIES_AND_SORORITIES("fraternities_and_sororities"),
    
    FRAUD_DISPUTE("fraud_dispute"),
    
    FRENCH("french"),
    
    FUEL("fuel"),
    
    FUEL_DEALER("fuel_dealer"),
    
    FUND_RAISING("fund_raising"),
    
    FUNERAL_SERVICES("funeral_services"),
    
    FURNITURE_AND_FIXTURES("furniture_and_fixtures"),
    
    FURNITURE_AND_HOME_DECOR("furniture_and_home_decor"),
    
    GARDENS("gardens"),
    
    GAS("gas"),
    
    GAS_STATIONS("gas_stations"),
    
    GASTROENTEROLOGISTS("gastroenterologists"),
    
    GASTROPUB("gastropub"),
    
    GENERAL("general"),
    
    GENERAL_SURGERY("general_surgery"),
    
    GEOLOGICAL("geological"),
    
    GERMAN("german"),
    
    GIFT_AND_NOVELTY("gift_and_novelty"),
    
    GIFTS("gifts"),
    
    GLASS_PRODUCTS("glass_products"),
    
    GLASSES_AND_OPTOMETRIST("glasses_and_optometrist"),
    
    GO_CARTS("go_carts"),
    
    GOLF("golf"),
    
    GOODS_AND_MERCHANDISE("goods_and_merchandise"),
    
    GOVERNMENT_DEPARTMENTS_AND_AGENCIES("government_departments_and_agencies"),
    
    GOVERNMENT_LOBBYISTS("government_lobbyists"),
    
    GREEK("greek"),
    
    GUN_RANGES("gun_ranges"),
    
    GYM("gym"),
    
    GYMNASTICS("gymnastics"),
    
    GYMS_AND_FITNESS_CENTERS("gyms_and_fitness_centers"),
    
    HAIR_REMOVAL("hair_removal"),
    
    HAIR_SALONS_AND_BARBERS("hair_salons_and_barbers"),
    
    HARDWARE_AND_SERVICES("hardware_and_services"),
    
    HARDWARE_STORE("hardware_store"),
    
    HEALTH_FOOD("health_food"),
    
    HEALTHCARE("healthcare"),
    
    HEALTHCARE_SERVICES("healthcare_services"),
    
    HEATING_VENTILATING_AND_AIR_CONDITIONING("heating_ventilating_and_air_conditioning"),
    
    HELIPORTS("heliports"),
    
    HIKING("hiking"),
    
    HISTORIC_SITES("historic_sites"),
    
    HOBBY_AND_COLLECTIBLES("hobby_and_collectibles"),
    
    HOCKEY("hockey"),
    
    HOLDING_AND_INVESTMENT_OFFICES("holding_and_investment_offices"),
    
    HOME("home"),
    
    HOME_APPLIANCES("home_appliances"),
    
    HOME_IMPROVEMENT("home_improvement"),
    
    HOME_INSPECTION_SERVICES("home_inspection_services"),
    
    HOOKAH_LOUNGES("hookah_lounges"),
    
    HOSPITALS_CLINICS_AND_MEDICAL_CENTERS("hospitals_clinics_and_medical_centers"),
    
    HOSTELS("hostels"),
    
    HOT_AIR_BALLOONS("hot_air_balloons"),
    
    HOTEL_LOUNGE("hotel_lounge"),
    
    HOTELS_AND_MOTELS("hotels_and_motels"),
    
    HOUSEHOLD("household"),
    
    HOUSEWARES("housewares"),
    
    HOUSING_ASSISTANCE_AND_SHELTERS("housing_assistance_and_shelters"),
    
    HUMAN_RESOURCES("human_resources"),
    
    HUNTING_AND_FISHING("hunting_and_fishing"),
    
    ICE_CREAM("ice_cream"),
    
    IMMIGRATION("immigration"),
    
    IMPORT_AND_EXPORT("import_and_export"),
    
    INCOME("income"),
    
    INDIAN("indian"),
    
    INDONESIAN("indonesian"),
    
    INDUSTRIAL_MACHINERY_AND_EQUIPMENT("industrial_machinery_and_equipment"),
    
    INDUSTRIAL_MACHINERY_AND_VEHICLES("industrial_machinery_and_vehicles"),
    
    INDUSTRIAL_SUPPLIES("industrial_supplies"),
    
    INFRASTRUCTURE("infrastructure"),
    
    INSUFFICIENT_FUNDS("insufficient_funds"),
    
    INSURANCE("insurance"),
    
    INTEREST("interest"),
    
    INTEREST_CHARGED("interest_charged"),
    
    INTEREST_EARNED("interest_earned"),
    
    INTERIOR_DESIGN("interior_design"),
    
    INTERNAL_ACCOUNT_TRANSFER("internal_account_transfer"),
    
    INTERNAL_MEDICINE("internal_medicine"),
    
    INTERNET("internet"),
    
    INTERNET_CAFES("internet_cafes"),
    
    INTERNET_SERVICES("internet_services"),
    
    INVESTMENT("investment"),
    
    ITALIAN("italian"),
    
    JAPANESE("japanese"),
    
    JAZZ_AND_BLUES_CAFE("jazz_and_blues_cafe"),
    
    JEWELRY_AND_WATCHES("jewelry_and_watches"),
    
    JUICE_BAR("juice_bar"),
    
    KARAOKE("karaoke"),
    
    KEEP_THE_CHANGE_SAVINGS_PROGRAM("keep_the_change_savings_program"),
    
    KIDS("kids"),
    
    KIDS__STORE("kids'_store"),
    
    KITCHENS("kitchens"),
    
    KOREAN("korean"),
    
    LAKES("lakes"),
    
    LANDMARKS("landmarks"),
    
    LANDSCAPING_AND_GARDENERS("landscaping_and_gardeners"),
    
    LATE_PAYMENT("late_payment"),
    
    LATIN_AMERICAN("latin_american"),
    
    LAUNDRY_AND_GARMENT_SERVICES("laundry_and_garment_services"),
    
    LAW_ENFORCEMENT("law_enforcement"),
    
    LAWN_AND_GARDEN("lawn_and_garden"),
    
    LEATHER("leather"),
    
    LEATHER_GOODS("leather_goods"),
    
    LEGAL("legal"),
    
    LIBRARIES("libraries"),
    
    LIGHTING_FIXTURES("lighting_fixtures"),
    
    LIMOS_AND_CHAUFFEURS("limos_and_chauffeurs"),
    
    LINGERIE_STORE("lingerie_store"),
    
    LIVESTOCK_AND_ANIMALS("livestock_and_animals"),
    
    LOAN("loan"),
    
    LOANS_AND_MORTGAGES("loans_and_mortgages"),
    
    LODGES_AND_VACATION_RENTALS("lodges_and_vacation_rentals"),
    
    LODGING("lodging"),
    
    LOGGING_AND_SAWMILLS("logging_and_sawmills"),
    
    LUGGAGE("luggage"),
    
    MACHINE_SHOPS("machine_shops"),
    
    MAINTENANCE_AND_REPAIR("maintenance_and_repair"),
    
    MANAGEMENT("management"),
    
    MANICURES_AND_PEDICURES("manicures_and_pedicures"),
    
    MANUFACTURING("manufacturing"),
    
    MARINE_SUPPLIES("marine_supplies"),
    
    MARKET_RESEARCH_AND_CONSULTING("market_research_and_consulting"),
    
    MASONRY("masonry"),
    
    MASSAGE_CLINICS_AND_THERAPISTS("massage_clinics_and_therapists"),
    
    MEDIA("media"),
    
    MEDIA_PRODUCTION("media_production"),
    
    MEDICAL_SUPPLIES_AND_LABS("medical_supplies_and_labs"),
    
    MEDITERRANEAN("mediterranean"),
    
    MEN_S_STORE("men's_store"),
    
    MENTAL_HEALTH("mental_health"),
    
    METAL("metal"),
    
    METAL_PRODUCTS("metal_products"),
    
    METALS("metals"),
    
    MEXICAN("mexican"),
    
    MIDDLE_EASTERN("middle_eastern"),
    
    MILITARY("military"),
    
    MINIATURE_GOLF("miniature_golf"),
    
    MINING("mining"),
    
    MOBILE_HOMES("mobile_homes"),
    
    MOBILE_PHONES("mobile_phones"),
    
    MONUMENTS_AND_MEMORIALS("monuments_and_memorials"),
    
    MOROCCAN("moroccan"),
    
    MOSQUES("mosques"),
    
    MOTORCYCLE_MOPED_AND_SCOOTER_REPAIR("motorcycle_moped_and_scooter_repair"),
    
    MOTORCYCLES_MOPEDS_AND_SCOOTERS("motorcycles_mopeds_and_scooters"),
    
    MOUNTAINS("mountains"),
    
    MOVERS("movers"),
    
    MOVIE_THEATRES("movie_theatres"),
    
    MUSEUMS("museums"),
    
    MUSIC_VIDEO_AND_DVD("music_video_and_dvd"),
    
    MUSIC_AND_SHOW_VENUES("music_and_show_venues"),
    
    MUSICAL_INSTRUMENTS("musical_instruments"),
    
    NATURAL_PARKS("natural_parks"),
    
    NEUROLOGISTS("neurologists"),
    
    NEWS_REPORTING("news_reporting"),
    
    NEWSSTANDS("newsstands"),
    
    NIGHT_CLUBS("night_clubs"),
    
    NIGHTLIFE("nightlife"),
    
    NON_METALLIC_MINERALS("non-metallic_minerals"),
    
    NONMETALLIC_MINERAL_PRODUCTS("nonmetallic_mineral_products"),
    
    NURSES("nurses"),
    
    NUTRITIONISTS("nutritionists"),
    
    OBSTETRICIANS_AND_GYNECOLOGISTS("obstetricians_and_gynecologists"),
    
    OFFICE("office"),
    
    OFFICE_SUPPLIES("office_supplies"),
    
    OIL_AND_GAS("oil_and_gas"),
    
    ONCOLOGISTS("oncologists"),
    
    ONLINE_ADVERTISING("online_advertising"),
    
    ONLINE_SUBSCRIPTIONS("online_subscriptions"),
    
    OPHTHALMOLOGISTS("ophthalmologists"),
    
    OPTOMETRISTS("optometrists"),
    
    ORGANIZATIONS_AND_ASSOCIATIONS("organizations_and_associations"),
    
    ORTHOPEDIC_SURGEONS("orthopedic_surgeons"),
    
    OTHER("other"),
    
    OUTDOORS("outdoors"),
    
    OUTLET("outlet"),
    
    OVERDRAFT("overdraft"),
    
    PACKAGING("packaging"),
    
    PAINTBALL("paintball"),
    
    PAINTING("painting"),
    
    PAPER("paper"),
    
    PAPER_PRODUCTS("paper_products"),
    
    PARKING("parking"),
    
    PARKS("parks"),
    
    PARTY_CENTERS("party_centers"),
    
    PATHOLOGISTS("pathologists"),
    
    PAWN_SHOPS("pawn_shops"),
    
    PAYMENT("payment"),
    
    PAYPAL("paypal"),
    
    PAYROLL("payroll"),
    
    PEDIATRICIANS("pediatricians"),
    
    PERSONAL_CARE("personal_care"),
    
    PERSONAL_TRAINERS("personal_trainers"),
    
    PEST_CONTROL("pest_control"),
    
    PET("pet"),
    
    PETROLEUM("petroleum"),
    
    PETS("pets"),
    
    PHARMACIES("pharmacies"),
    
    PHONE("phone"),
    
    PHOTOGRAPHY("photography"),
    
    PHOTOS_AND_FRAMES("photos_and_frames"),
    
    PHYSICAL_THERAPY("physical_therapy"),
    
    PHYSICIANS("physicians"),
    
    PICNIC_AREAS("picnic_areas"),
    
    PIERCING("piercing"),
    
    PIZZA("pizza"),
    
    PLAID("plaid"),
    
    PLASTIC_PRODUCTS("plastic_products"),
    
    PLASTIC_SURGEONS("plastic_surgeons"),
    
    PLASTICS("plastics"),
    
    PLAYGROUNDS("playgrounds"),
    
    PLUMBING("plumbing"),
    
    PODIATRISTS("podiatrists"),
    
    POLICE_STATIONS("police_stations"),
    
    POOLS_AND_SPAS("pools_and_spas"),
    
    PORTUGUESE("portuguese"),
    
    POST_OFFICES("post_offices"),
    
    PREGNANCY_AND_SEXUAL_HEALTH("pregnancy_and_sexual_health"),
    
    PRIMARY_AND_SECONDARY_SCHOOLS("primary_and_secondary_schools"),
    
    PRINT_TV_RADIO_AND_OUTDOOR_ADVERTISING("print_tv_radio_and_outdoor_advertising"),
    
    PRINTING_AND_PUBLISHING("printing_and_publishing"),
    
    PROMOTIONAL_ITEMS("promotional_items"),
    
    PROPERTY_MANAGEMENT("property_management"),
    
    PSYCHIATRISTS("psychiatrists"),
    
    PSYCHICS_AND_ASTROLOGERS("psychics_and_astrologers"),
    
    PSYCHOLOGISTS("psychologists"),
    
    PUBLIC_AND_SOCIAL_SERVICES("public_and_social_services"),
    
    PUBLIC_RELATIONS("public_relations"),
    
    PUBLIC_TRANSPORTATION_SERVICES("public_transportation_services"),
    
    RACE_TRACKS("race_tracks"),
    
    RACQUET_SPORTS("racquet_sports"),
    
    RACQUETBALL("racquetball"),
    
    RADIOLOGISTS("radiologists"),
    
    RAFTING("rafting"),
    
    RAIL("rail"),
    
    REAL_ESTATE("real_estate"),
    
    REAL_ESTATE_AGENTS("real_estate_agents"),
    
    REAL_ESTATE_APPRAISER("real_estate_appraiser"),
    
    REAL_ESTATE_DEVELOPMENT_AND_TITLE_COMPANIES("real_estate_development_and_title_companies"),
    
    RECREATION("recreation"),
    
    RECREATION_CENTERS("recreation_centers"),
    
    REFRIGERATION_AND_ICE("refrigeration_and_ice"),
    
    REFUND("refund"),
    
    RELIGIOUS("religious"),
    
    RENEWABLE_ENERGY("renewable_energy"),
    
    RENT("rent"),
    
    REPAIR_SERVICES("repair_services"),
    
    RESEARCH("research"),
    
    RESORTS("resorts"),
    
    RESPIRATORY("respiratory"),
    
    RESTAURANTS("restaurants"),
    
    RETIREMENT("retirement"),
    
    RIDE_SHARE("ride_share"),
    
    RIVERS("rivers"),
    
    ROCK_CLIMBING("rock_climbing"),
    
    ROOFERS("roofers"),
    
    RUBBER("rubber"),
    
    RUBBER_PRODUCTS("rubber_products"),
    
    RUNNING("running"),
    
    RVS_AND_MOTOR_HOMES("rvs_and_motor_homes"),
    
    SALVAGE_YARDS("salvage_yards"),
    
    SANITARY_AND_WASTE_MANAGEMENT("sanitary_and_waste_management"),
    
    SAVE_AS_YOU_GO("save_as_you_go"),
    
    SCANDINAVIAN("scandinavian"),
    
    SCIENTIFIC("scientific"),
    
    SCUBA_DIVING("scuba_diving"),
    
    SEAFOOD("seafood"),
    
    SEARCH_ENGINE_MARKETING_AND_OPTIMIZATION("search_engine_marketing_and_optimization"),
    
    SECURITY_AND_SAFETY("security_and_safety"),
    
    SENIOR_CITIZEN_SERVICES("senior_citizen_services"),
    
    SERVICE("service"),
    
    SERVICE_INSTRUMENTS("service_instruments"),
    
    SERVICES("services"),
    
    SHIPPING("shipping"),
    
    SHIPPING_AND_FREIGHT("shipping_and_freight"),
    
    SHOE_STORE("shoe_store"),
    
    SHOPPING("shopping"),
    
    SHOPPING_CENTERS_AND_MALLS("shopping_centers_and_malls"),
    
    SHOPS("shops"),
    
    SKATING("skating"),
    
    SKIN_CARE("skin_care"),
    
    SKYDIVING("skydiving"),
    
    SNOW_SPORTS("snow_sports"),
    
    SOCCER("soccer"),
    
    SOCIAL_CLUBS("social_clubs"),
    
    SOFTWARE("software"),
    
    SOFTWARE_DEVELOPMENT("software_development"),
    
    SPANISH("spanish"),
    
    SPAS("spas"),
    
    SPECIALTY("specialty"),
    
    SPORT("sport"),
    
    SPORTING_GOODS("sporting_goods"),
    
    SPORTS_AND_RECREATION_CAMPS("sports_and_recreation_camps"),
    
    SPORTS_BAR("sports_bar"),
    
    SPORTS_CLUBS("sports_clubs"),
    
    SPORTS_VENUES("sports_venues"),
    
    SQUARE("square"),
    
    SQUARE_CASH("square_cash"),
    
    STADIUMS_AND_ARENAS("stadiums_and_arenas"),
    
    STEAKHOUSES("steakhouses"),
    
    STOCK_BROKERS("stock_brokers"),
    
    STORAGE("storage"),
    
    STRIP_CLUB("strip_club"),
    
    STUDENT_AID_AND_GRANTS("student_aid_and_grants"),
    
    SUBSCRIPTION("subscription"),
    
    SUPERMARKETS_AND_GROCERIES("supermarkets_and_groceries"),
    
    SUSHI("sushi"),
    
    SWIMMING("swimming"),
    
    SWIMMING_POOL_MAINTENANCE_AND_SERVICES("swimming_pool_maintenance_and_services"),
    
    SWIMWEAR("swimwear"),
    
    SWISS("swiss"),
    
    SYMPHONY_AND_OPERA("symphony_and_opera"),
    
    SYNAGOGUES("synagogues"),
    
    TAILORS("tailors"),
    
    TANNING_SALONS("tanning_salons"),
    
    TATTOOING("tattooing"),
    
    TAX("tax"),
    
    TAXES("taxes"),
    
    TAXI("taxi"),
    
    TELECOMMUNICATION_SERVICES("telecommunication_services"),
    
    TELEVISION("television"),
    
    TEMPLE("temple"),
    
    TENNIS("tennis"),
    
    TEXTILES("textiles"),
    
    THAI("thai"),
    
    THEATRICAL_PRODUCTIONS("theatrical_productions"),
    
    THIRD_PARTY("third_party"),
    
    TOBACCO("tobacco"),
    
    TOLLS_AND_FEES("tolls_and_fees"),
    
    TOURIST_INFORMATION_AND_SERVICES("tourist_information_and_services"),
    
    TOWING("towing"),
    
    TOYS("toys"),
    
    TRANSFER("transfer"),
    
    TRANSFERS_AND_ADJUSTMENTS("transfers_and_adjustments"),
    
    TRANSPORT("transport"),
    
    TRANSPORTATION("transportation"),
    
    TRANSPORTATION_CENTERS("transportation_centers"),
    
    TRANSPORTATION_EQUIPMENT("transportation_equipment"),
    
    TRAVEL("travel"),
    
    TRAVEL_AND_TRANSPORTATION("travel_and_transportation"),
    
    TRAVEL_AGENTS_AND_TOUR_OPERATORS("travel_agents_and_tour_operators"),
    
    TREE_SERVICE("tree_service"),
    
    TURKISH("turkish"),
    
    TUTORING_AND_EDUCATIONAL_SERVICES("tutoring_and_educational_services"),
    
    UPHOLSTERY("upholstery"),
    
    UROLOGISTS("urologists"),
    
    USED_CAR_DEALERS("used_car_dealers"),
    
    UTILITIES("utilities"),
    
    VEGAN_AND_VEGETARIAN("vegan_and_vegetarian"),
    
    VENMO("venmo"),
    
    VETERINARIANS("veterinarians"),
    
    VIDEO_GAMES("video_games"),
    
    VINTAGE_AND_THRIFT("vintage_and_thrift"),
    
    VOCATIONAL_SCHOOLS("vocational_schools"),
    
    WAREHOUSES_AND_WHOLESALE_STORES("warehouses_and_wholesale_stores"),
    
    WATER("water"),
    
    WATER_AND_WASTE_MANAGEMENT("water_and_waste_management"),
    
    WATER_SPORTS("water_sports"),
    
    WEB_DESIGN_AND_DEVELOPMENT("web_design_and_development"),
    
    WEDDING_AND_BRIDAL("wedding_and_bridal"),
    
    WELDING("welding"),
    
    WHOLESALE("wholesale"),
    
    WINE_BAR("wine_bar"),
    
    WINERY("winery"),
    
    WIRE("wire"),
    
    WIRE_TRANSFER("wire_transfer"),
    
    WITHDRAWAL("withdrawal"),
    
    WOMEN_S_STORE("women's_store"),
    
    WOOD_PRODUCTS("wood_products"),
    
    WRITING_COPYWRITING_AND_TECHNICAL_WRITING("writing_copywriting_and_technical_writing"),
    
    YOGA_AND_PILATES("yoga_and_pilates"),
    
    YOUTH_ORGANIZATIONS("youth_organizations"),
    
    ZOO("zoo"),
    
    MINUS("-");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<CategoryEnum> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private TransactionMerchant merchant;

  /**
   * The status of the transaction. This will be either posted or pending.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    POSTED("posted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ISO_CURRENCY_CODE = "iso_currency_code";
  @SerializedName(SERIALIZED_NAME_ISO_CURRENCY_CODE)
  private String isoCurrencyCode;

  public static final String SERIALIZED_NAME_REMOTE_DATA = "remote_data";
  @SerializedName(SERIALIZED_NAME_REMOTE_DATA)
  private Object remoteData = null;

  public AssetReportTransaction() {
  }

  public AssetReportTransaction remoteId(String remoteId) {
    
    this.remoteId = remoteId;
    return this;
  }

   /**
   * Remote Id of the transaction, ie Plaid or Teller Id
   * @return remoteId
  **/
  @javax.annotation.Nonnull
  public String getRemoteId() {
    return remoteId;
  }


  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public AssetReportTransaction remoteAccountId(String remoteAccountId) {
    
    this.remoteAccountId = remoteAccountId;
    return this;
  }

   /**
   * Remote Account Id of the transaction, ie Plaid Account Id
   * @return remoteAccountId
  **/
  @javax.annotation.Nonnull
  public String getRemoteAccountId() {
    return remoteAccountId;
  }


  public void setRemoteAccountId(String remoteAccountId) {
    this.remoteAccountId = remoteAccountId;
  }


  public AssetReportTransaction amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount in cents associated with the transaction. The format of this value is a double. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
   * @return amount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public AssetReportTransaction date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Date of the transaction (YYYY-MM-DD)
   * @return date
  **/
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public AssetReportTransaction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the transaction
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AssetReportTransaction category(List<CategoryEnum> category) {
    
    this.category = category;
    return this;
  }

  public AssetReportTransaction addCategoryItem(CategoryEnum categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

   /**
   * Categories of the transaction, ie Computers and Electronics. &#39;-&#39; means we could not map the upstream category.
   * @return category
  **/
  @javax.annotation.Nonnull
  public List<CategoryEnum> getCategory() {
    return category;
  }


  public void setCategory(List<CategoryEnum> category) {
    this.category = category;
  }


  public AssetReportTransaction merchant(TransactionMerchant merchant) {
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @javax.annotation.Nonnull
  public TransactionMerchant getMerchant() {
    return merchant;
  }


  public void setMerchant(TransactionMerchant merchant) {
    this.merchant = merchant;
  }


  public AssetReportTransaction status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the transaction. This will be either posted or pending.
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AssetReportTransaction isoCurrencyCode(String isoCurrencyCode) {
    
    this.isoCurrencyCode = isoCurrencyCode;
    return this;
  }

   /**
   * The ISO-4217 currency code of the transaction
   * @return isoCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getIsoCurrencyCode() {
    return isoCurrencyCode;
  }


  public void setIsoCurrencyCode(String isoCurrencyCode) {
    this.isoCurrencyCode = isoCurrencyCode;
  }


  public AssetReportTransaction remoteData(Object remoteData) {
    
    this.remoteData = remoteData;
    return this;
  }

   /**
   * Get remoteData
   * @return remoteData
  **/
  @javax.annotation.Nullable
  public Object getRemoteData() {
    return remoteData;
  }


  public void setRemoteData(Object remoteData) {
    this.remoteData = remoteData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetReportTransaction assetReportTransaction = (AssetReportTransaction) o;
    return Objects.equals(this.remoteId, assetReportTransaction.remoteId) &&
        Objects.equals(this.remoteAccountId, assetReportTransaction.remoteAccountId) &&
        Objects.equals(this.amount, assetReportTransaction.amount) &&
        Objects.equals(this.date, assetReportTransaction.date) &&
        Objects.equals(this.description, assetReportTransaction.description) &&
        Objects.equals(this.category, assetReportTransaction.category) &&
        Objects.equals(this.merchant, assetReportTransaction.merchant) &&
        Objects.equals(this.status, assetReportTransaction.status) &&
        Objects.equals(this.isoCurrencyCode, assetReportTransaction.isoCurrencyCode) &&
        Objects.equals(this.remoteData, assetReportTransaction.remoteData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteId, remoteAccountId, amount, date, description, category, merchant, status, isoCurrencyCode, remoteData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetReportTransaction {\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    remoteAccountId: ").append(toIndentedString(remoteAccountId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isoCurrencyCode: ").append(toIndentedString(isoCurrencyCode)).append("\n");
    sb.append("    remoteData: ").append(toIndentedString(remoteData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("remote_id");
    openapiFields.add("remote_account_id");
    openapiFields.add("amount");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("category");
    openapiFields.add("merchant");
    openapiFields.add("status");
    openapiFields.add("iso_currency_code");
    openapiFields.add("remote_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("remote_id");
    openapiRequiredFields.add("remote_account_id");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("merchant");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("remote_data");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AssetReportTransaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetReportTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetReportTransaction is not found in the empty JSON string", AssetReportTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AssetReportTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetReportTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetReportTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("remote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_id").toString()));
      }
      if (!jsonObj.get("remote_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_account_id").toString()));
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("category") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `merchant`
      TransactionMerchant.validateJsonElement(jsonObj.get("merchant"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("iso_currency_code") != null && !jsonObj.get("iso_currency_code").isJsonNull()) && !jsonObj.get("iso_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_currency_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetReportTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetReportTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetReportTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetReportTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetReportTransaction>() {
           @Override
           public void write(JsonWriter out, AssetReportTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetReportTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssetReportTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssetReportTransaction
  * @throws IOException if the JSON string is invalid with respect to AssetReportTransaction
  */
  public static AssetReportTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetReportTransaction.class);
  }

 /**
  * Convert an instance of AssetReportTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

