/*
 * Fuse
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountSubtype;
import org.openapitools.client.model.AccountType;
import org.openapitools.client.model.FinancialConnectionsAccountCachedBalance;
import org.openapitools.client.model.FinancialConnectionsAccountInstitution;
import org.openapitools.client.model.FinancialConnectionsAccountLiabilityAllOfAprs;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FinancialConnectionsAccountLiability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-10T13:25:52.697721Z[UTC]")
public class FinancialConnectionsAccountLiability {
  public static final String SERIALIZED_NAME_REMOTE_ID = "remote_id";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_INSTITUTION = "institution";
  @SerializedName(SERIALIZED_NAME_INSTITUTION)
  private FinancialConnectionsAccountInstitution institution;

  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private String mask;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AccountType type;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private AccountSubtype subtype;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private FinancialConnectionsAccountCachedBalance balance;

  public static final String SERIALIZED_NAME_REMOTE_DATA = "remote_data";
  @SerializedName(SERIALIZED_NAME_REMOTE_DATA)
  private Object remoteData = null;

  public static final String SERIALIZED_NAME_APRS = "aprs";
  @SerializedName(SERIALIZED_NAME_APRS)
  private List<FinancialConnectionsAccountLiabilityAllOfAprs> aprs;

  public static final String SERIALIZED_NAME_INTEREST_RATE_PERCENTAGE = "interest_rate_percentage";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE_PERCENTAGE)
  private BigDecimal interestRatePercentage;

  public static final String SERIALIZED_NAME_ORIGINATION_PRINCIPAL_AMOUNT = "origination_principal_amount";
  @SerializedName(SERIALIZED_NAME_ORIGINATION_PRINCIPAL_AMOUNT)
  private BigDecimal originationPrincipalAmount;

  public static final String SERIALIZED_NAME_NEXT_PAYMENT_DUE_DATE = "next_payment_due_date";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT_DUE_DATE)
  private String nextPaymentDueDate;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_DATE = "last_payment_date";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_DATE)
  private String lastPaymentDate;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_AMOUNT = "last_payment_amount";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_AMOUNT)
  private BigDecimal lastPaymentAmount;

  public static final String SERIALIZED_NAME_MINIMUM_PAYMENT_AMOUNT = "minimum_payment_amount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PAYMENT_AMOUNT)
  private BigDecimal minimumPaymentAmount;

  public FinancialConnectionsAccountLiability() {
  }

  public FinancialConnectionsAccountLiability remoteId(String remoteId) {
    
    this.remoteId = remoteId;
    return this;
  }

   /**
   * Remote Id of the account, ie Plaid or Teller account id
   * @return remoteId
  **/
  @javax.annotation.Nonnull
  public String getRemoteId() {
    return remoteId;
  }


  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public FinancialConnectionsAccountLiability currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The ISO-4217 currency code of the account.
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public FinancialConnectionsAccountLiability fingerprint(String fingerprint) {
    
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * Uniquely identifies this account across all accounts for a single financial connection. Used for reconnection deduplication. See more information here: https://letsfuse.readme.io/docs/duplicate-accounts
   * @return fingerprint
  **/
  @javax.annotation.Nonnull
  public String getFingerprint() {
    return fingerprint;
  }


  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public FinancialConnectionsAccountLiability institution(FinancialConnectionsAccountInstitution institution) {
    
    this.institution = institution;
    return this;
  }

   /**
   * Get institution
   * @return institution
  **/
  @javax.annotation.Nullable
  public FinancialConnectionsAccountInstitution getInstitution() {
    return institution;
  }


  public void setInstitution(FinancialConnectionsAccountInstitution institution) {
    this.institution = institution;
  }


  public FinancialConnectionsAccountLiability mask(String mask) {
    
    this.mask = mask;
    return this;
  }

   /**
   * The partial account number.
   * @return mask
  **/
  @javax.annotation.Nullable
  public String getMask() {
    return mask;
  }


  public void setMask(String mask) {
    this.mask = mask;
  }


  public FinancialConnectionsAccountLiability name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The account&#39;s name, ie &#39;My Checking&#39;
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FinancialConnectionsAccountLiability type(AccountType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public AccountType getType() {
    return type;
  }


  public void setType(AccountType type) {
    this.type = type;
  }


  public FinancialConnectionsAccountLiability subtype(AccountSubtype subtype) {
    
    this.subtype = subtype;
    return this;
  }

   /**
   * Get subtype
   * @return subtype
  **/
  @javax.annotation.Nullable
  public AccountSubtype getSubtype() {
    return subtype;
  }


  public void setSubtype(AccountSubtype subtype) {
    this.subtype = subtype;
  }


  public FinancialConnectionsAccountLiability balance(FinancialConnectionsAccountCachedBalance balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @javax.annotation.Nonnull
  public FinancialConnectionsAccountCachedBalance getBalance() {
    return balance;
  }


  public void setBalance(FinancialConnectionsAccountCachedBalance balance) {
    this.balance = balance;
  }


  public FinancialConnectionsAccountLiability remoteData(Object remoteData) {
    
    this.remoteData = remoteData;
    return this;
  }

   /**
   * Get remoteData
   * @return remoteData
  **/
  @javax.annotation.Nullable
  public Object getRemoteData() {
    return remoteData;
  }


  public void setRemoteData(Object remoteData) {
    this.remoteData = remoteData;
  }


  public FinancialConnectionsAccountLiability aprs(List<FinancialConnectionsAccountLiabilityAllOfAprs> aprs) {
    
    this.aprs = aprs;
    return this;
  }

  public FinancialConnectionsAccountLiability addAprsItem(FinancialConnectionsAccountLiabilityAllOfAprs aprsItem) {
    if (this.aprs == null) {
      this.aprs = new ArrayList<>();
    }
    this.aprs.add(aprsItem);
    return this;
  }

   /**
   * The various interest rates that apply to the account. If APR data is not available, this array will be empty.
   * @return aprs
  **/
  @javax.annotation.Nullable
  public List<FinancialConnectionsAccountLiabilityAllOfAprs> getAprs() {
    return aprs;
  }


  public void setAprs(List<FinancialConnectionsAccountLiabilityAllOfAprs> aprs) {
    this.aprs = aprs;
  }


  public FinancialConnectionsAccountLiability interestRatePercentage(BigDecimal interestRatePercentage) {
    
    this.interestRatePercentage = interestRatePercentage;
    return this;
  }

   /**
   * The interest rate on the loan as a percentage.
   * @return interestRatePercentage
  **/
  @javax.annotation.Nullable
  public BigDecimal getInterestRatePercentage() {
    return interestRatePercentage;
  }


  public void setInterestRatePercentage(BigDecimal interestRatePercentage) {
    this.interestRatePercentage = interestRatePercentage;
  }


  public FinancialConnectionsAccountLiability originationPrincipalAmount(BigDecimal originationPrincipalAmount) {
    
    this.originationPrincipalAmount = originationPrincipalAmount;
    return this;
  }

   /**
   * The original principal balance of the loan.
   * @return originationPrincipalAmount
  **/
  @javax.annotation.Nullable
  public BigDecimal getOriginationPrincipalAmount() {
    return originationPrincipalAmount;
  }


  public void setOriginationPrincipalAmount(BigDecimal originationPrincipalAmount) {
    this.originationPrincipalAmount = originationPrincipalAmount;
  }


  public FinancialConnectionsAccountLiability nextPaymentDueDate(String nextPaymentDueDate) {
    
    this.nextPaymentDueDate = nextPaymentDueDate;
    return this;
  }

   /**
   * The due date for the next payment. The due date is null if a payment is not expected.
   * @return nextPaymentDueDate
  **/
  @javax.annotation.Nullable
  public String getNextPaymentDueDate() {
    return nextPaymentDueDate;
  }


  public void setNextPaymentDueDate(String nextPaymentDueDate) {
    this.nextPaymentDueDate = nextPaymentDueDate;
  }


  public FinancialConnectionsAccountLiability lastPaymentDate(String lastPaymentDate) {
    
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * The date of the last payment. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
   * @return lastPaymentDate
  **/
  @javax.annotation.Nullable
  public String getLastPaymentDate() {
    return lastPaymentDate;
  }


  public void setLastPaymentDate(String lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }


  public FinancialConnectionsAccountLiability lastPaymentAmount(BigDecimal lastPaymentAmount) {
    
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * The amount of the last payment.
   * @return lastPaymentAmount
  **/
  @javax.annotation.Nullable
  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }


  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }


  public FinancialConnectionsAccountLiability minimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    
    this.minimumPaymentAmount = minimumPaymentAmount;
    return this;
  }

   /**
   * The minimum payment required for an account. This can apply to any debt account.
   * @return minimumPaymentAmount
  **/
  @javax.annotation.Nullable
  public BigDecimal getMinimumPaymentAmount() {
    return minimumPaymentAmount;
  }


  public void setMinimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    this.minimumPaymentAmount = minimumPaymentAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialConnectionsAccountLiability financialConnectionsAccountLiability = (FinancialConnectionsAccountLiability) o;
    return Objects.equals(this.remoteId, financialConnectionsAccountLiability.remoteId) &&
        Objects.equals(this.currency, financialConnectionsAccountLiability.currency) &&
        Objects.equals(this.fingerprint, financialConnectionsAccountLiability.fingerprint) &&
        Objects.equals(this.institution, financialConnectionsAccountLiability.institution) &&
        Objects.equals(this.mask, financialConnectionsAccountLiability.mask) &&
        Objects.equals(this.name, financialConnectionsAccountLiability.name) &&
        Objects.equals(this.type, financialConnectionsAccountLiability.type) &&
        Objects.equals(this.subtype, financialConnectionsAccountLiability.subtype) &&
        Objects.equals(this.balance, financialConnectionsAccountLiability.balance) &&
        Objects.equals(this.remoteData, financialConnectionsAccountLiability.remoteData) &&
        Objects.equals(this.aprs, financialConnectionsAccountLiability.aprs) &&
        Objects.equals(this.interestRatePercentage, financialConnectionsAccountLiability.interestRatePercentage) &&
        Objects.equals(this.originationPrincipalAmount, financialConnectionsAccountLiability.originationPrincipalAmount) &&
        Objects.equals(this.nextPaymentDueDate, financialConnectionsAccountLiability.nextPaymentDueDate) &&
        Objects.equals(this.lastPaymentDate, financialConnectionsAccountLiability.lastPaymentDate) &&
        Objects.equals(this.lastPaymentAmount, financialConnectionsAccountLiability.lastPaymentAmount) &&
        Objects.equals(this.minimumPaymentAmount, financialConnectionsAccountLiability.minimumPaymentAmount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteId, currency, fingerprint, institution, mask, name, type, subtype, balance, remoteData, aprs, interestRatePercentage, originationPrincipalAmount, nextPaymentDueDate, lastPaymentDate, lastPaymentAmount, minimumPaymentAmount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialConnectionsAccountLiability {\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    institution: ").append(toIndentedString(institution)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    remoteData: ").append(toIndentedString(remoteData)).append("\n");
    sb.append("    aprs: ").append(toIndentedString(aprs)).append("\n");
    sb.append("    interestRatePercentage: ").append(toIndentedString(interestRatePercentage)).append("\n");
    sb.append("    originationPrincipalAmount: ").append(toIndentedString(originationPrincipalAmount)).append("\n");
    sb.append("    nextPaymentDueDate: ").append(toIndentedString(nextPaymentDueDate)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    minimumPaymentAmount: ").append(toIndentedString(minimumPaymentAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("remote_id");
    openapiFields.add("currency");
    openapiFields.add("fingerprint");
    openapiFields.add("institution");
    openapiFields.add("mask");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("subtype");
    openapiFields.add("balance");
    openapiFields.add("remote_data");
    openapiFields.add("aprs");
    openapiFields.add("interest_rate_percentage");
    openapiFields.add("origination_principal_amount");
    openapiFields.add("next_payment_due_date");
    openapiFields.add("last_payment_date");
    openapiFields.add("last_payment_amount");
    openapiFields.add("minimum_payment_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("remote_id");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("fingerprint");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("remote_data");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FinancialConnectionsAccountLiability
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinancialConnectionsAccountLiability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinancialConnectionsAccountLiability is not found in the empty JSON string", FinancialConnectionsAccountLiability.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FinancialConnectionsAccountLiability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinancialConnectionsAccountLiability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FinancialConnectionsAccountLiability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("remote_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_id").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      // validate the optional field `institution`
      if (jsonObj.get("institution") != null && !jsonObj.get("institution").isJsonNull()) {
        FinancialConnectionsAccountInstitution.validateJsonElement(jsonObj.get("institution"));
      }
      if ((jsonObj.get("mask") != null && !jsonObj.get("mask").isJsonNull()) && !jsonObj.get("mask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mask").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `balance`
      FinancialConnectionsAccountCachedBalance.validateJsonElement(jsonObj.get("balance"));
      if (jsonObj.get("aprs") != null && !jsonObj.get("aprs").isJsonNull()) {
        JsonArray jsonArrayaprs = jsonObj.getAsJsonArray("aprs");
        if (jsonArrayaprs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aprs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aprs` to be an array in the JSON string but got `%s`", jsonObj.get("aprs").toString()));
          }

          // validate the optional field `aprs` (array)
          for (int i = 0; i < jsonArrayaprs.size(); i++) {
            FinancialConnectionsAccountLiabilityAllOfAprs.validateJsonElement(jsonArrayaprs.get(i));
          };
        }
      }
      if ((jsonObj.get("next_payment_due_date") != null && !jsonObj.get("next_payment_due_date").isJsonNull()) && !jsonObj.get("next_payment_due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_payment_due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_payment_due_date").toString()));
      }
      if ((jsonObj.get("last_payment_date") != null && !jsonObj.get("last_payment_date").isJsonNull()) && !jsonObj.get("last_payment_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_payment_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_payment_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinancialConnectionsAccountLiability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinancialConnectionsAccountLiability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinancialConnectionsAccountLiability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinancialConnectionsAccountLiability.class));

       return (TypeAdapter<T>) new TypeAdapter<FinancialConnectionsAccountLiability>() {
           @Override
           public void write(JsonWriter out, FinancialConnectionsAccountLiability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinancialConnectionsAccountLiability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FinancialConnectionsAccountLiability given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FinancialConnectionsAccountLiability
  * @throws IOException if the JSON string is invalid with respect to FinancialConnectionsAccountLiability
  */
  public static FinancialConnectionsAccountLiability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinancialConnectionsAccountLiability.class);
  }

 /**
  * Convert an instance of FinancialConnectionsAccountLiability to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

